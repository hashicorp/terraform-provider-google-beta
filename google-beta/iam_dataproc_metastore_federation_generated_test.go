// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
)

func TestAccDataprocMetastoreFederationIamBindingGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProvidersOiCS,
		Steps: []resource.TestStep{
			{
				Config: testAccDataprocMetastoreFederationIamBinding_basicGenerated(context),
			},
			{
				// Test Iam Binding update
				Config: testAccDataprocMetastoreFederationIamBinding_updateGenerated(context),
			},
		},
	})
}

func TestAccDataprocMetastoreFederationIamMemberGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProvidersOiCS,
		Steps: []resource.TestStep{
			{
				// Test Iam Member creation (no update for member, no need to test)
				Config: testAccDataprocMetastoreFederationIamMember_basicGenerated(context),
			},
		},
	})
}

func TestAccDataprocMetastoreFederationIamPolicyGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": randString(t, 10),
		"role":          "roles/viewer",
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProvidersOiCS,
		Steps: []resource.TestStep{
			{
				Config: testAccDataprocMetastoreFederationIamPolicy_basicGenerated(context),
			},
			{
				Config: testAccDataprocMetastoreFederationIamPolicy_emptyBinding(context),
			},
		},
	})
}

func testAccDataprocMetastoreFederationIamMember_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_dataproc_metastore_federation" "default" {
  provider      = google-beta
  location      = "us-central1"
  federation_id = "fed%{random_suffix}"
  version       = "3.1.2"

  backend_metastores {
      rank           = "1"
      name           = google_dataproc_metastore_service.default.id
      metastore_type = "DATAPROC_METASTORE" 
    }
}

resource "google_dataproc_metastore_service" "default" {
  provider   = google-beta
  service_id = "fed%{random_suffix}"
  location   = "us-central1"
  tier       = "DEVELOPER"


  hive_metastore_config {
    version           = "3.1.2"
    endpoint_protocol = "GRPC"
  }
}

resource "google_dataproc_metastore_federation_iam_member" "foo" {
  provider = google-beta
  project = google_dataproc_metastore_federation.default.project
  location = google_dataproc_metastore_federation.default.location
  federation_id = google_dataproc_metastore_federation.default.federation_id
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
}
`, context)
}

func testAccDataprocMetastoreFederationIamPolicy_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_dataproc_metastore_federation" "default" {
  provider      = google-beta
  location      = "us-central1"
  federation_id = "fed%{random_suffix}"
  version       = "3.1.2"

  backend_metastores {
      rank           = "1"
      name           = google_dataproc_metastore_service.default.id
      metastore_type = "DATAPROC_METASTORE" 
    }
}

resource "google_dataproc_metastore_service" "default" {
  provider   = google-beta
  service_id = "fed%{random_suffix}"
  location   = "us-central1"
  tier       = "DEVELOPER"


  hive_metastore_config {
    version           = "3.1.2"
    endpoint_protocol = "GRPC"
  }
}

data "google_iam_policy" "foo" {
  provider = google-beta
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
  }
}

resource "google_dataproc_metastore_federation_iam_policy" "foo" {
  provider = google-beta
  project = google_dataproc_metastore_federation.default.project
  location = google_dataproc_metastore_federation.default.location
  federation_id = google_dataproc_metastore_federation.default.federation_id
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAccDataprocMetastoreFederationIamPolicy_emptyBinding(context map[string]interface{}) string {
	return Nprintf(`
resource "google_dataproc_metastore_federation" "default" {
  provider      = google-beta
  location      = "us-central1"
  federation_id = "fed%{random_suffix}"
  version       = "3.1.2"

  backend_metastores {
      rank           = "1"
      name           = google_dataproc_metastore_service.default.id
      metastore_type = "DATAPROC_METASTORE" 
    }
}

resource "google_dataproc_metastore_service" "default" {
  provider   = google-beta
  service_id = "fed%{random_suffix}"
  location   = "us-central1"
  tier       = "DEVELOPER"


  hive_metastore_config {
    version           = "3.1.2"
    endpoint_protocol = "GRPC"
  }
}

data "google_iam_policy" "foo" {
  provider = google-beta
}

resource "google_dataproc_metastore_federation_iam_policy" "foo" {
  provider = google-beta
  project = google_dataproc_metastore_federation.default.project
  location = google_dataproc_metastore_federation.default.location
  federation_id = google_dataproc_metastore_federation.default.federation_id
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAccDataprocMetastoreFederationIamBinding_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_dataproc_metastore_federation" "default" {
  provider      = google-beta
  location      = "us-central1"
  federation_id = "fed%{random_suffix}"
  version       = "3.1.2"

  backend_metastores {
      rank           = "1"
      name           = google_dataproc_metastore_service.default.id
      metastore_type = "DATAPROC_METASTORE" 
    }
}

resource "google_dataproc_metastore_service" "default" {
  provider   = google-beta
  service_id = "fed%{random_suffix}"
  location   = "us-central1"
  tier       = "DEVELOPER"


  hive_metastore_config {
    version           = "3.1.2"
    endpoint_protocol = "GRPC"
  }
}

resource "google_dataproc_metastore_federation_iam_binding" "foo" {
  provider = google-beta
  project = google_dataproc_metastore_federation.default.project
  location = google_dataproc_metastore_federation.default.location
  federation_id = google_dataproc_metastore_federation.default.federation_id
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
}
`, context)
}

func testAccDataprocMetastoreFederationIamBinding_updateGenerated(context map[string]interface{}) string {
	return Nprintf(`
resource "google_dataproc_metastore_federation" "default" {
  provider      = google-beta
  location      = "us-central1"
  federation_id = "fed%{random_suffix}"
  version       = "3.1.2"

  backend_metastores {
      rank           = "1"
      name           = google_dataproc_metastore_service.default.id
      metastore_type = "DATAPROC_METASTORE" 
    }
}

resource "google_dataproc_metastore_service" "default" {
  provider   = google-beta
  service_id = "fed%{random_suffix}"
  location   = "us-central1"
  tier       = "DEVELOPER"


  hive_metastore_config {
    version           = "3.1.2"
    endpoint_protocol = "GRPC"
  }
}

resource "google_dataproc_metastore_federation_iam_binding" "foo" {
  provider = google-beta
  project = google_dataproc_metastore_federation.default.project
  location = google_dataproc_metastore_federation.default.location
  federation_id = google_dataproc_metastore_federation.default.federation_id
  role = "%{role}"
  members = ["user:admin@hashicorptest.com", "user:gterraformtest1@gmail.com"]
}
`, context)
}

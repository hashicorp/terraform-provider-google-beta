// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
)

func TestAccFirebaseHostingRelease_firebasehostingReleaseInSiteExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":    getTestProjectFromEnv(),
		"random_suffix": randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProvidersOiCS,
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseHostingRelease_firebasehostingReleaseInSiteExample(context),
			},
			{
				ResourceName:            "google_firebase_hosting_release.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"release_id", "site_id", "channel_id", "version_name"},
			},
		},
	})
}

func testAccFirebaseHostingRelease_firebasehostingReleaseInSiteExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_firebase_hosting_site" "default" {
  provider = google-beta
  project  = "%{project_id}"
  site_id  = "tf-test-site-id%{random_suffix}"
}

resource "google_firebase_hosting_version" "default" {
  provider = google-beta
  site_id  = google_firebase_hosting_site.default.site_id
  config {
    redirects {
      glob = "/google/**"
      status_code = 302
      location = "https://www.google.com"
    }
  }
}

resource "google_firebase_hosting_release" "default" {
  provider     = google-beta
  site_id      = google_firebase_hosting_site.default.site_id
  version_name = google_firebase_hosting_version.default.name
  message      = "Test release"
}
`, context)
}

func TestAccFirebaseHostingRelease_firebasehostingReleaseInChannelExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":    getTestProjectFromEnv(),
		"random_suffix": randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProvidersOiCS,
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseHostingRelease_firebasehostingReleaseInChannelExample(context),
			},
			{
				ResourceName:            "google_firebase_hosting_release.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"release_id", "site_id", "channel_id", "version_name"},
			},
		},
	})
}

func testAccFirebaseHostingRelease_firebasehostingReleaseInChannelExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_firebase_hosting_site" "default" {
  provider = google-beta
  project  = "%{project_id}"
  site_id  = "tf-test-site-with-channel%{random_suffix}"
}

resource "google_firebase_hosting_version" "default" {
  provider = google-beta
  site_id  = google_firebase_hosting_site.default.site_id
  config {
    redirects {
      glob = "/google/**"
      status_code = 302
      location = "https://www.google.com"
    }
  }
}

resource "google_firebase_hosting_channel" "default" {
  provider   = google-beta
  site_id    = google_firebase_hosting_site.default.site_id
  channel_id = "tf-test-channel-id%{random_suffix}"
}

resource "google_firebase_hosting_release" "default" {
  provider     = google-beta
  site_id      = google_firebase_hosting_site.default.site_id
  channel_id   = google_firebase_hosting_channel.default.channel_id
  version_name = google_firebase_hosting_version.default.name
  message      = "Test release in channel"
}
`, context)
}

func TestAccFirebaseHostingRelease_firebasehostingReleaseDisableExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":    getTestProjectFromEnv(),
		"random_suffix": randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProvidersOiCS,
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseHostingRelease_firebasehostingReleaseDisableExample(context),
			},
			{
				ResourceName:            "google_firebase_hosting_release.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"release_id", "site_id", "channel_id", "version_name"},
			},
		},
	})
}

func testAccFirebaseHostingRelease_firebasehostingReleaseDisableExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_firebase_hosting_site" "default" {
  provider = google-beta
  project  = "%{project_id}"
  site_id  = "tf-test-site-id%{random_suffix}"
}

resource "google_firebase_hosting_release" "default" {
  provider = google-beta
  site_id  = google_firebase_hosting_site.default.site_id
  type     = "SITE_DISABLE"
  message  = "Take down site"
}
`, context)
}

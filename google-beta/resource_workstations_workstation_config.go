// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func ResourceWorkstationsWorkstationConfig() *schema.Resource {
	return &schema.Resource{
		Create: resourceWorkstationsWorkstationConfigCreate,
		Read:   resourceWorkstationsWorkstationConfigRead,
		Update: resourceWorkstationsWorkstationConfigUpdate,
		Delete: resourceWorkstationsWorkstationConfigDelete,

		Importer: &schema.ResourceImporter{
			State: resourceWorkstationsWorkstationConfigImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(30 * time.Minute),
			Update: schema.DefaultTimeout(30 * time.Minute),
			Delete: schema.DefaultTimeout(30 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The location where the workstation cluster config should reside.`,
			},
			"workstation_cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The name of the workstation cluster.`,
			},
			"workstation_config_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The ID of the workstation cluster config.`,
			},
			"annotations": {
				Type:        schema.TypeMap,
				Optional:    true,
				Description: `Client-specified annotations. This is distinct from labels.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"container": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `Container that will be run for each workstation using this configuration when that workstation is started.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"args": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `Arguments passed to the entrypoint.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"command": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `If set, overrides the default ENTRYPOINT specified by the image.`,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"env": {
							Type:     schema.TypeMap,
							Optional: true,
							Description: `Environment variables passed to the container.
The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".`,
							Elem: &schema.Schema{Type: schema.TypeString},
						},
						"image": {
							Type:        schema.TypeString,
							Computed:    true,
							Optional:    true,
							Description: `Docker image defining the container. This image must be accessible by the config"s service account.`,
						},
						"run_as_user": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: `If set, overrides the USER specified in the image with the given uid.`,
						},
						"working_dir": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `If set, overrides the default DIR specified by the image.`,
						},
					},
				},
			},
			"display_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Human-readable name for this resource.`,
			},
			"encryption_key": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `Encrypts resources of this workstation configuration using a customer-managed encryption key.

If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"kms_key": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The name of the Google Cloud KMS encryption key.`,
						},
						"kms_key_service_account": {
							Type:        schema.TypeString,
							Required:    true,
							Description: `The service account to use with the specified KMS key.`,
						},
					},
				},
			},
			"host": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				ForceNew:    true,
				Description: `Runtime host for a workstation.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"gce_instance": {
							Type:        schema.TypeList,
							Computed:    true,
							Optional:    true,
							ForceNew:    true,
							Description: `Specifies a Compute Engine instance as the host.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"boot_disk_size_gb": {
										Type:        schema.TypeInt,
										Computed:    true,
										Optional:    true,
										ForceNew:    true,
										Description: `Size of the boot disk in GB.`,
									},
									"confidential_instance_config": {
										Type:        schema.TypeList,
										Optional:    true,
										ForceNew:    true,
										Description: `A set of Compute Engine Confidential VM instance options.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"enable_confidential_compute": {
													Type:        schema.TypeBool,
													Optional:    true,
													ForceNew:    true,
													Description: `Whether the instance has confidential compute enabled.`,
												},
											},
										},
									},
									"disable_public_ip_addresses": {
										Type:        schema.TypeBool,
										Optional:    true,
										ForceNew:    true,
										Description: `Whether instances have no public IP address.`,
									},
									"machine_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Optional:    true,
										ForceNew:    true,
										Description: `The name of a Compute Engine machine type.`,
									},
									"pool_size": {
										Type:        schema.TypeInt,
										Computed:    true,
										Optional:    true,
										ForceNew:    true,
										Description: `Number of instances to pool for faster workstation startup.`,
									},
									"service_account": {
										Type:        schema.TypeString,
										Optional:    true,
										ForceNew:    true,
										Description: `Email address of the service account that will be used on VM instances used to support this config. This service account must have permission to pull the specified container image. If not set, VMs will run without a service account, in which case the image must be publicly accessible.`,
									},
									"shielded_instance_config": {
										Type:        schema.TypeList,
										Optional:    true,
										ForceNew:    true,
										Description: `A set of Compute Engine Shielded instance options.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"enable_integrity_monitoring": {
													Type:        schema.TypeBool,
													Optional:    true,
													ForceNew:    true,
													Description: `Whether the instance has integrity monitoring enabled.`,
												},
												"enable_secure_boot": {
													Type:        schema.TypeBool,
													Optional:    true,
													ForceNew:    true,
													Description: `Whether the instance has Secure Boot enabled.`,
												},
												"enable_vtpm": {
													Type:        schema.TypeBool,
													Optional:    true,
													ForceNew:    true,
													Description: `Whether the instance has the vTPM enabled.`,
												},
											},
										},
									},
									"tags": {
										Type:        schema.TypeList,
										Optional:    true,
										ForceNew:    true,
										Description: `Network tags to add to the Compute Engine machines backing the Workstations.`,
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
					},
				},
			},
			"labels": {
				Type:        schema.TypeMap,
				Optional:    true,
				Description: `Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"persistent_directories": {
				Type:        schema.TypeList,
				Computed:    true,
				Optional:    true,
				Description: `Directories to persist across workstation sessions.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"gce_pd": {
							Type:        schema.TypeList,
							Computed:    true,
							Optional:    true,
							Description: `PersistentDirectory backed by a Compute Engine regional persistent disk.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"disk_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Optional:    true,
										Description: `Type of the disk to use.`,
									},
									"fs_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Optional:    true,
										Description: `Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if sourceSnapshot is set.`,
									},
									"reclaim_policy": {
										Type:         schema.TypeString,
										Optional:     true,
										ValidateFunc: validateEnum([]string{"RECLAIM_POLICY_UNSPECIFIED", "DELETE", "RETAIN", ""}),
										Description:  `What should happen to the disk after the workstation is deleted. Defaults to DELETE. Possible values: ["RECLAIM_POLICY_UNSPECIFIED", "DELETE", "RETAIN"]`,
									},
									"size_gb": {
										Type:        schema.TypeInt,
										Computed:    true,
										Optional:    true,
										Description: `Size of the disk in GB. Must be empty if sourceSnapshot is set.`,
									},
								},
							},
						},
						"mount_path": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Location of this directory in the running workstation.`,
						},
					},
				},
			},
			"conditions": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Status conditions describing the current resource state.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"code": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The status code, which should be an enum value of google.rpc.Code.`,
						},
						"details": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `A list of messages that carry the error details.`,
							Elem: &schema.Schema{
								Type: schema.TypeMap,
							},
						},
						"message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Human readable message indicating details about the current status.`,
						},
					},
				},
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Time the Instance was created in UTC.`,
			},
			"degraded": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the conditions field.`,
			},
			"etag": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Checksum computed by the server. 
May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Full name of this resource.`,
			},
			"uid": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The system-generated UID of the resource.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceWorkstationsWorkstationConfigCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	displayNameProp, err := expandWorkstationsWorkstationConfigDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !isEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	labelsProp, err := expandWorkstationsWorkstationConfigLabels(d.Get("labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("labels"); !isEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	annotationsProp, err := expandWorkstationsWorkstationConfigAnnotations(d.Get("annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("annotations"); !isEmptyValue(reflect.ValueOf(annotationsProp)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}
	etagProp, err := expandWorkstationsWorkstationConfigEtag(d.Get("etag"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("etag"); !isEmptyValue(reflect.ValueOf(etagProp)) && (ok || !reflect.DeepEqual(v, etagProp)) {
		obj["etag"] = etagProp
	}
	hostProp, err := expandWorkstationsWorkstationConfigHost(d.Get("host"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("host"); !isEmptyValue(reflect.ValueOf(hostProp)) && (ok || !reflect.DeepEqual(v, hostProp)) {
		obj["host"] = hostProp
	}
	persistentDirectoriesProp, err := expandWorkstationsWorkstationConfigPersistentDirectories(d.Get("persistent_directories"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("persistent_directories"); !isEmptyValue(reflect.ValueOf(persistentDirectoriesProp)) && (ok || !reflect.DeepEqual(v, persistentDirectoriesProp)) {
		obj["persistentDirectories"] = persistentDirectoriesProp
	}
	containerProp, err := expandWorkstationsWorkstationConfigContainer(d.Get("container"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("container"); !isEmptyValue(reflect.ValueOf(containerProp)) && (ok || !reflect.DeepEqual(v, containerProp)) {
		obj["container"] = containerProp
	}
	encryptionKeyProp, err := expandWorkstationsWorkstationConfigEncryptionKey(d.Get("encryption_key"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("encryption_key"); !isEmptyValue(reflect.ValueOf(encryptionKeyProp)) && (ok || !reflect.DeepEqual(v, encryptionKeyProp)) {
		obj["encryptionKey"] = encryptionKeyProp
	}

	url, err := replaceVars(d, config, "{{WorkstationsBasePath}}projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs?workstationConfigId={{workstation_config_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new WorkstationConfig: %#v", obj)
	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for WorkstationConfig: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "POST", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutCreate))
	if err != nil {
		return fmt.Errorf("Error creating WorkstationConfig: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = workstationsOperationWaitTime(
		config, res, project, "Creating WorkstationConfig", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create WorkstationConfig: %s", err)
	}

	log.Printf("[DEBUG] Finished creating WorkstationConfig %q: %#v", d.Id(), res)

	return resourceWorkstationsWorkstationConfigRead(d, meta)
}

func resourceWorkstationsWorkstationConfigRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "{{WorkstationsBasePath}}projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for WorkstationConfig: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequest(config, "GET", billingProject, url, userAgent, nil)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("WorkstationsWorkstationConfig %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading WorkstationConfig: %s", err)
	}

	if err := d.Set("name", flattenWorkstationsWorkstationConfigName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkstationConfig: %s", err)
	}
	if err := d.Set("uid", flattenWorkstationsWorkstationConfigUid(res["uid"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkstationConfig: %s", err)
	}
	if err := d.Set("display_name", flattenWorkstationsWorkstationConfigDisplayName(res["displayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkstationConfig: %s", err)
	}
	if err := d.Set("labels", flattenWorkstationsWorkstationConfigLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkstationConfig: %s", err)
	}
	if err := d.Set("annotations", flattenWorkstationsWorkstationConfigAnnotations(res["annotations"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkstationConfig: %s", err)
	}
	if err := d.Set("etag", flattenWorkstationsWorkstationConfigEtag(res["etag"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkstationConfig: %s", err)
	}
	if err := d.Set("create_time", flattenWorkstationsWorkstationConfigCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkstationConfig: %s", err)
	}
	if err := d.Set("host", flattenWorkstationsWorkstationConfigHost(res["host"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkstationConfig: %s", err)
	}
	if err := d.Set("persistent_directories", flattenWorkstationsWorkstationConfigPersistentDirectories(res["persistentDirectories"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkstationConfig: %s", err)
	}
	if err := d.Set("container", flattenWorkstationsWorkstationConfigContainer(res["container"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkstationConfig: %s", err)
	}
	if err := d.Set("encryption_key", flattenWorkstationsWorkstationConfigEncryptionKey(res["encryptionKey"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkstationConfig: %s", err)
	}
	if err := d.Set("degraded", flattenWorkstationsWorkstationConfigDegraded(res["degraded"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkstationConfig: %s", err)
	}
	if err := d.Set("conditions", flattenWorkstationsWorkstationConfigConditions(res["conditions"], d, config)); err != nil {
		return fmt.Errorf("Error reading WorkstationConfig: %s", err)
	}

	return nil
}

func resourceWorkstationsWorkstationConfigUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for WorkstationConfig: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	displayNameProp, err := expandWorkstationsWorkstationConfigDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("display_name"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	labelsProp, err := expandWorkstationsWorkstationConfigLabels(d.Get("labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("labels"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	annotationsProp, err := expandWorkstationsWorkstationConfigAnnotations(d.Get("annotations"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("annotations"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}
	etagProp, err := expandWorkstationsWorkstationConfigEtag(d.Get("etag"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("etag"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, etagProp)) {
		obj["etag"] = etagProp
	}
	persistentDirectoriesProp, err := expandWorkstationsWorkstationConfigPersistentDirectories(d.Get("persistent_directories"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("persistent_directories"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, persistentDirectoriesProp)) {
		obj["persistentDirectories"] = persistentDirectoriesProp
	}
	containerProp, err := expandWorkstationsWorkstationConfigContainer(d.Get("container"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("container"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, containerProp)) {
		obj["container"] = containerProp
	}
	encryptionKeyProp, err := expandWorkstationsWorkstationConfigEncryptionKey(d.Get("encryption_key"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("encryption_key"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, encryptionKeyProp)) {
		obj["encryptionKey"] = encryptionKeyProp
	}

	url, err := replaceVars(d, config, "{{WorkstationsBasePath}}projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating WorkstationConfig %q: %#v", d.Id(), obj)
	updateMask := []string{}

	if d.HasChange("display_name") {
		updateMask = append(updateMask, "displayName")
	}

	if d.HasChange("labels") {
		updateMask = append(updateMask, "labels")
	}

	if d.HasChange("annotations") {
		updateMask = append(updateMask, "annotations")
	}

	if d.HasChange("etag") {
		updateMask = append(updateMask, "etag")
	}

	if d.HasChange("persistent_directories") {
		updateMask = append(updateMask, "persistentDirectories")
	}

	if d.HasChange("container") {
		updateMask = append(updateMask, "container")
	}

	if d.HasChange("encryption_key") {
		updateMask = append(updateMask, "encryptionKey")
	}
	// updateMask is a URL parameter but not present in the schema, so replaceVars
	// won't set it
	url, err = addQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "PATCH", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return fmt.Errorf("Error updating WorkstationConfig %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating WorkstationConfig %q: %#v", d.Id(), res)
	}

	err = workstationsOperationWaitTime(
		config, res, project, "Updating WorkstationConfig", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}

	return resourceWorkstationsWorkstationConfigRead(d, meta)
}

func resourceWorkstationsWorkstationConfigDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for WorkstationConfig: %s", err)
	}
	billingProject = project

	url, err := replaceVars(d, config, "{{WorkstationsBasePath}}projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting WorkstationConfig %q", d.Id())

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "DELETE", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutDelete))
	if err != nil {
		return handleNotFoundError(err, d, "WorkstationConfig")
	}

	err = workstationsOperationWaitTime(
		config, res, project, "Deleting WorkstationConfig", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting WorkstationConfig %q: %#v", d.Id(), res)
	return nil
}

func resourceWorkstationsWorkstationConfigImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*Config)
	if err := parseImportId([]string{
		"projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/workstationClusters/(?P<workstation_cluster_id>[^/]+)/workstationConfigs/(?P<workstation_config_id>[^/]+)",
		"(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<workstation_cluster_id>[^/]+)/(?P<workstation_config_id>[^/]+)",
		"(?P<location>[^/]+)/(?P<workstation_cluster_id>[^/]+)/(?P<workstation_config_id>[^/]+)",
		"(?P<workstation_config_id>[^/]+)",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := replaceVars(d, config, "projects/{{project}}/locations/{{location}}/workstationClusters/{{workstation_cluster_id}}/workstationConfigs/{{workstation_config_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenWorkstationsWorkstationConfigName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigUid(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigDisplayName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigLabels(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigAnnotations(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigEtag(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigCreateTime(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHost(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["gce_instance"] =
		flattenWorkstationsWorkstationConfigHostGceInstance(original["gceInstance"], d, config)
	return []interface{}{transformed}
}
func flattenWorkstationsWorkstationConfigHostGceInstance(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["machine_type"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceMachineType(original["machineType"], d, config)
	transformed["service_account"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceServiceAccount(original["serviceAccount"], d, config)
	transformed["pool_size"] =
		flattenWorkstationsWorkstationConfigHostGceInstancePoolSize(original["poolSize"], d, config)
	transformed["boot_disk_size_gb"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceBootDiskSizeGb(original["bootDiskSizeGb"], d, config)
	transformed["tags"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceTags(original["tags"], d, config)
	transformed["disable_public_ip_addresses"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceDisablePublicIpAddresses(original["disablePublicIpAddresses"], d, config)
	transformed["shielded_instance_config"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfig(original["shieldedInstanceConfig"], d, config)
	transformed["confidential_instance_config"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceConfidentialInstanceConfig(original["confidentialInstanceConfig"], d, config)
	return []interface{}{transformed}
}
func flattenWorkstationsWorkstationConfigHostGceInstanceMachineType(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHostGceInstanceServiceAccount(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHostGceInstancePoolSize(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := stringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenWorkstationsWorkstationConfigHostGceInstanceBootDiskSizeGb(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := stringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenWorkstationsWorkstationConfigHostGceInstanceTags(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHostGceInstanceDisablePublicIpAddresses(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enable_secure_boot"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfigEnableSecureBoot(original["enableSecureBoot"], d, config)
	transformed["enable_vtpm"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfigEnableVtpm(original["enableVtpm"], d, config)
	transformed["enable_integrity_monitoring"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfigEnableIntegrityMonitoring(original["enableIntegrityMonitoring"], d, config)
	return []interface{}{transformed}
}
func flattenWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfigEnableSecureBoot(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfigEnableVtpm(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfigEnableIntegrityMonitoring(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHostGceInstanceConfidentialInstanceConfig(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enable_confidential_compute"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceConfidentialInstanceConfigEnableConfidentialCompute(original["enableConfidentialCompute"], d, config)
	return []interface{}{transformed}
}
func flattenWorkstationsWorkstationConfigHostGceInstanceConfidentialInstanceConfigEnableConfidentialCompute(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigPersistentDirectories(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"mount_path": flattenWorkstationsWorkstationConfigPersistentDirectoriesMountPath(original["mountPath"], d, config),
			"gce_pd":     flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePd(original["gcePd"], d, config),
		})
	}
	return transformed
}
func flattenWorkstationsWorkstationConfigPersistentDirectoriesMountPath(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePd(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["fs_type"] =
		flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdFsType(original["fsType"], d, config)
	transformed["disk_type"] =
		flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdDiskType(original["diskType"], d, config)
	transformed["size_gb"] =
		flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdSizeGb(original["sizeGb"], d, config)
	transformed["reclaim_policy"] =
		flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdReclaimPolicy(original["reclaimPolicy"], d, config)
	return []interface{}{transformed}
}
func flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdFsType(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdDiskType(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdSizeGb(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := stringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdReclaimPolicy(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigContainer(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["image"] =
		flattenWorkstationsWorkstationConfigContainerImage(original["image"], d, config)
	transformed["command"] =
		flattenWorkstationsWorkstationConfigContainerCommand(original["command"], d, config)
	transformed["args"] =
		flattenWorkstationsWorkstationConfigContainerArgs(original["args"], d, config)
	transformed["working_dir"] =
		flattenWorkstationsWorkstationConfigContainerWorkingDir(original["workingDir"], d, config)
	transformed["env"] =
		flattenWorkstationsWorkstationConfigContainerEnv(original["env"], d, config)
	transformed["run_as_user"] =
		flattenWorkstationsWorkstationConfigContainerRunAsUser(original["runAsUser"], d, config)
	return []interface{}{transformed}
}
func flattenWorkstationsWorkstationConfigContainerImage(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigContainerCommand(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigContainerArgs(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigContainerWorkingDir(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigContainerEnv(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigContainerRunAsUser(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := stringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenWorkstationsWorkstationConfigEncryptionKey(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["kms_key"] =
		flattenWorkstationsWorkstationConfigEncryptionKeyKmsKey(original["kmsKey"], d, config)
	transformed["kms_key_service_account"] =
		flattenWorkstationsWorkstationConfigEncryptionKeyKmsKeyServiceAccount(original["kmsKeyServiceAccount"], d, config)
	return []interface{}{transformed}
}
func flattenWorkstationsWorkstationConfigEncryptionKeyKmsKey(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigEncryptionKeyKmsKeyServiceAccount(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigDegraded(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigConditions(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"code":    flattenWorkstationsWorkstationConfigConditionsCode(original["code"], d, config),
			"message": flattenWorkstationsWorkstationConfigConditionsMessage(original["message"], d, config),
			"details": flattenWorkstationsWorkstationConfigConditionsDetails(original["details"], d, config),
		})
	}
	return transformed
}
func flattenWorkstationsWorkstationConfigConditionsCode(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := stringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenWorkstationsWorkstationConfigConditionsMessage(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigConditionsDetails(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func expandWorkstationsWorkstationConfigDisplayName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigLabels(v interface{}, d TerraformResourceData, config *Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandWorkstationsWorkstationConfigAnnotations(v interface{}, d TerraformResourceData, config *Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandWorkstationsWorkstationConfigEtag(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigHost(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedGceInstance, err := expandWorkstationsWorkstationConfigHostGceInstance(original["gce_instance"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGceInstance); val.IsValid() && !isEmptyValue(val) {
		transformed["gceInstance"] = transformedGceInstance
	}

	return transformed, nil
}

func expandWorkstationsWorkstationConfigHostGceInstance(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMachineType, err := expandWorkstationsWorkstationConfigHostGceInstanceMachineType(original["machine_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMachineType); val.IsValid() && !isEmptyValue(val) {
		transformed["machineType"] = transformedMachineType
	}

	transformedServiceAccount, err := expandWorkstationsWorkstationConfigHostGceInstanceServiceAccount(original["service_account"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAccount); val.IsValid() && !isEmptyValue(val) {
		transformed["serviceAccount"] = transformedServiceAccount
	}

	transformedPoolSize, err := expandWorkstationsWorkstationConfigHostGceInstancePoolSize(original["pool_size"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPoolSize); val.IsValid() && !isEmptyValue(val) {
		transformed["poolSize"] = transformedPoolSize
	}

	transformedBootDiskSizeGb, err := expandWorkstationsWorkstationConfigHostGceInstanceBootDiskSizeGb(original["boot_disk_size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBootDiskSizeGb); val.IsValid() && !isEmptyValue(val) {
		transformed["bootDiskSizeGb"] = transformedBootDiskSizeGb
	}

	transformedTags, err := expandWorkstationsWorkstationConfigHostGceInstanceTags(original["tags"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTags); val.IsValid() && !isEmptyValue(val) {
		transformed["tags"] = transformedTags
	}

	transformedDisablePublicIpAddresses, err := expandWorkstationsWorkstationConfigHostGceInstanceDisablePublicIpAddresses(original["disable_public_ip_addresses"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisablePublicIpAddresses); val.IsValid() && !isEmptyValue(val) {
		transformed["disablePublicIpAddresses"] = transformedDisablePublicIpAddresses
	}

	transformedShieldedInstanceConfig, err := expandWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfig(original["shielded_instance_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedShieldedInstanceConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["shieldedInstanceConfig"] = transformedShieldedInstanceConfig
	}

	transformedConfidentialInstanceConfig, err := expandWorkstationsWorkstationConfigHostGceInstanceConfidentialInstanceConfig(original["confidential_instance_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfidentialInstanceConfig); val.IsValid() && !isEmptyValue(val) {
		transformed["confidentialInstanceConfig"] = transformedConfidentialInstanceConfig
	}

	return transformed, nil
}

func expandWorkstationsWorkstationConfigHostGceInstanceMachineType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigHostGceInstanceServiceAccount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigHostGceInstancePoolSize(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigHostGceInstanceBootDiskSizeGb(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigHostGceInstanceTags(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigHostGceInstanceDisablePublicIpAddresses(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableSecureBoot, err := expandWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfigEnableSecureBoot(original["enable_secure_boot"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableSecureBoot); val.IsValid() && !isEmptyValue(val) {
		transformed["enableSecureBoot"] = transformedEnableSecureBoot
	}

	transformedEnableVtpm, err := expandWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfigEnableVtpm(original["enable_vtpm"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableVtpm); val.IsValid() && !isEmptyValue(val) {
		transformed["enableVtpm"] = transformedEnableVtpm
	}

	transformedEnableIntegrityMonitoring, err := expandWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfigEnableIntegrityMonitoring(original["enable_integrity_monitoring"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableIntegrityMonitoring); val.IsValid() && !isEmptyValue(val) {
		transformed["enableIntegrityMonitoring"] = transformedEnableIntegrityMonitoring
	}

	return transformed, nil
}

func expandWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfigEnableSecureBoot(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfigEnableVtpm(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfigEnableIntegrityMonitoring(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigHostGceInstanceConfidentialInstanceConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableConfidentialCompute, err := expandWorkstationsWorkstationConfigHostGceInstanceConfidentialInstanceConfigEnableConfidentialCompute(original["enable_confidential_compute"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableConfidentialCompute); val.IsValid() && !isEmptyValue(val) {
		transformed["enableConfidentialCompute"] = transformedEnableConfidentialCompute
	}

	return transformed, nil
}

func expandWorkstationsWorkstationConfigHostGceInstanceConfidentialInstanceConfigEnableConfidentialCompute(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigPersistentDirectories(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedMountPath, err := expandWorkstationsWorkstationConfigPersistentDirectoriesMountPath(original["mount_path"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedMountPath); val.IsValid() && !isEmptyValue(val) {
			transformed["mountPath"] = transformedMountPath
		}

		transformedGcePd, err := expandWorkstationsWorkstationConfigPersistentDirectoriesGcePd(original["gce_pd"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedGcePd); val.IsValid() && !isEmptyValue(val) {
			transformed["gcePd"] = transformedGcePd
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandWorkstationsWorkstationConfigPersistentDirectoriesMountPath(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigPersistentDirectoriesGcePd(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFsType, err := expandWorkstationsWorkstationConfigPersistentDirectoriesGcePdFsType(original["fs_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFsType); val.IsValid() && !isEmptyValue(val) {
		transformed["fsType"] = transformedFsType
	}

	transformedDiskType, err := expandWorkstationsWorkstationConfigPersistentDirectoriesGcePdDiskType(original["disk_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDiskType); val.IsValid() && !isEmptyValue(val) {
		transformed["diskType"] = transformedDiskType
	}

	transformedSizeGb, err := expandWorkstationsWorkstationConfigPersistentDirectoriesGcePdSizeGb(original["size_gb"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSizeGb); val.IsValid() && !isEmptyValue(val) {
		transformed["sizeGb"] = transformedSizeGb
	}

	transformedReclaimPolicy, err := expandWorkstationsWorkstationConfigPersistentDirectoriesGcePdReclaimPolicy(original["reclaim_policy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedReclaimPolicy); val.IsValid() && !isEmptyValue(val) {
		transformed["reclaimPolicy"] = transformedReclaimPolicy
	}

	return transformed, nil
}

func expandWorkstationsWorkstationConfigPersistentDirectoriesGcePdFsType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigPersistentDirectoriesGcePdDiskType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigPersistentDirectoriesGcePdSizeGb(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigPersistentDirectoriesGcePdReclaimPolicy(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigContainer(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedImage, err := expandWorkstationsWorkstationConfigContainerImage(original["image"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedImage); val.IsValid() && !isEmptyValue(val) {
		transformed["image"] = transformedImage
	}

	transformedCommand, err := expandWorkstationsWorkstationConfigContainerCommand(original["command"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCommand); val.IsValid() && !isEmptyValue(val) {
		transformed["command"] = transformedCommand
	}

	transformedArgs, err := expandWorkstationsWorkstationConfigContainerArgs(original["args"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedArgs); val.IsValid() && !isEmptyValue(val) {
		transformed["args"] = transformedArgs
	}

	transformedWorkingDir, err := expandWorkstationsWorkstationConfigContainerWorkingDir(original["working_dir"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWorkingDir); val.IsValid() && !isEmptyValue(val) {
		transformed["workingDir"] = transformedWorkingDir
	}

	transformedEnv, err := expandWorkstationsWorkstationConfigContainerEnv(original["env"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnv); val.IsValid() && !isEmptyValue(val) {
		transformed["env"] = transformedEnv
	}

	transformedRunAsUser, err := expandWorkstationsWorkstationConfigContainerRunAsUser(original["run_as_user"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRunAsUser); val.IsValid() && !isEmptyValue(val) {
		transformed["runAsUser"] = transformedRunAsUser
	}

	return transformed, nil
}

func expandWorkstationsWorkstationConfigContainerImage(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigContainerCommand(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigContainerArgs(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigContainerWorkingDir(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigContainerEnv(v interface{}, d TerraformResourceData, config *Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandWorkstationsWorkstationConfigContainerRunAsUser(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigEncryptionKey(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedKmsKey, err := expandWorkstationsWorkstationConfigEncryptionKeyKmsKey(original["kms_key"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKey); val.IsValid() && !isEmptyValue(val) {
		transformed["kmsKey"] = transformedKmsKey
	}

	transformedKmsKeyServiceAccount, err := expandWorkstationsWorkstationConfigEncryptionKeyKmsKeyServiceAccount(original["kms_key_service_account"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyServiceAccount); val.IsValid() && !isEmptyValue(val) {
		transformed["kmsKeyServiceAccount"] = transformedKmsKeyServiceAccount
	}

	return transformed, nil
}

func expandWorkstationsWorkstationConfigEncryptionKeyKmsKey(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandWorkstationsWorkstationConfigEncryptionKeyKmsKeyServiceAccount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package transcoder_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccTranscoderJob_transcoderJobBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckTranscoderJobDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccTranscoderJob_transcoderJobBasicExample(context),
			},
			{
				ResourceName:            "google_transcoder_job.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"end_time", "labels", "location", "state", "template_id", "terraform_labels"},
			},
		},
	})
}

func testAccTranscoderJob_transcoderJobBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_storage_bucket" "default" {
  name          = "tf-test-transcoder-job%{random_suffix}"
  location      = "US"
  force_destroy = true

  uniform_bucket_level_access = true
  public_access_prevention = "enforced"
}

resource "google_storage_bucket_object" "example_mp4" {
  name   = "example.mp4"
  source = "./test-fixtures/example.mp4"
  bucket = google_storage_bucket.default.name
}

resource "google_transcoder_job" "default" {
  template_id = google_transcoder_job_template.default.name
  location    = "us-central1"

  labels = {
    "label" = "key"
  }
}

resource "google_transcoder_job_template" "default" {
  job_template_id = "tf-test-example-job-template%{random_suffix}"
  location = "us-central1"
  config {
    inputs {
      key = "input0"
      uri = "gs://${google_storage_bucket.default.name}/${google_storage_bucket_object.example_mp4.name}"
    }
    output {
      uri = "gs://${google_storage_bucket.default.name}/outputs/"
    }
    edit_list {
      key               = "atom0"
      inputs            = ["input0"]
      start_time_offset = "0s"
    }
    elementary_streams {
      key = "video-stream0"
      video_stream {
        h264 {
          width_pixels      = 640
          height_pixels     = 360
          bitrate_bps       = 550000
          frame_rate        = 60
          pixel_format      = "yuv420p"
          rate_control_mode = "vbr"
          crf_level         = 21
          gop_duration      = "3s"
          vbv_size_bits     = 550000
          vbv_fullness_bits = 495000
          entropy_coder     = "cabac"
          profile           = "high"
          preset            = "veryfast"

        }
      }
    }
    elementary_streams {
      key = "video-stream1"
      video_stream {
        h264 {
          width_pixels      = 1280
          height_pixels     = 720
          bitrate_bps       = 550000
          frame_rate        = 60
          pixel_format      = "yuv420p"
          rate_control_mode = "vbr"
          crf_level         = 21
          gop_duration      = "3s"
          vbv_size_bits     = 2500000
          vbv_fullness_bits = 2250000
          entropy_coder     = "cabac"
          profile           = "high"
          preset            = "veryfast"
        }
      }
    }
    elementary_streams {
      key = "audio-stream0"
      audio_stream {
        codec             = "aac"
        bitrate_bps       = 64000
        channel_count     = 2
        channel_layout    = ["fl", "fr"]
        sample_rate_hertz = 48000
      }
    }
    mux_streams {
      key                = "sd"
      file_name          = "sd.mp4"
      container          = "mp4"
      elementary_streams = ["video-stream0", "audio-stream0"]
    }
    mux_streams {
      key                = "hd"
      file_name          = "hd.mp4"
      container          = "mp4"
      elementary_streams = ["video-stream1", "audio-stream0"]
    }
  }
  labels = {
    "label" = "key"
  }
}
`, context)
}

func TestAccTranscoderJob_transcoderJobPubsubExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckTranscoderJobDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccTranscoderJob_transcoderJobPubsubExample(context),
			},
			{
				ResourceName:            "google_transcoder_job.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"end_time", "labels", "location", "state", "template_id", "terraform_labels"},
			},
		},
	})
}

func testAccTranscoderJob_transcoderJobPubsubExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_storage_bucket" "default" {
  name          = "tf-test-transcoder-job%{random_suffix}"
  location      = "US"
  force_destroy = true

  uniform_bucket_level_access = true
  public_access_prevention = "enforced"
}

resource "google_storage_bucket_object" "example_mp4" {
  name   = "example.mp4"
  source = "./test-fixtures/example.mp4"
  bucket = google_storage_bucket.default.name
}

resource "google_pubsub_topic" "transcoder_notifications" {
  name = "tf-test-transcoder-notifications%{random_suffix}"
}

resource "google_transcoder_job" "default" {
  location    = "us-central1"
  
  config {
    inputs {
      key = "input0"
      uri = "gs://${google_storage_bucket.default.name}/${google_storage_bucket_object.example_mp4.name}"
    }
    edit_list {
      key               = "atom0"
      inputs            = ["input0"]
      start_time_offset = "0s"
    }
    ad_breaks {
      start_time_offset = "3.500s"
    }
    elementary_streams {
      key = "video-stream0"
      video_stream {
        h264 {
          width_pixels      = 640
          height_pixels     = 360
          bitrate_bps       = 550000
          frame_rate        = 60
          pixel_format      = "yuv420p"
          rate_control_mode = "vbr"
          crf_level         = 21
          gop_duration      = "3s"
          vbv_size_bits     = 550000
          vbv_fullness_bits = 495000
          entropy_coder     = "cabac"
          profile           = "high"
          preset            = "veryfast"

        }
      }
    }
    elementary_streams {
      key = "video-stream1"
      video_stream {
        h264 {
          width_pixels      = 1280
          height_pixels     = 720
          bitrate_bps       = 550000
          frame_rate        = 60
          pixel_format      = "yuv420p"
          rate_control_mode = "vbr"
          crf_level         = 21
          gop_duration      = "3s"
          vbv_size_bits     = 2500000
          vbv_fullness_bits = 2250000
          entropy_coder     = "cabac"
          profile           = "high"
          preset            = "veryfast"
        }
      }
    }
    elementary_streams {
      key = "audio-stream0"
      audio_stream {
        codec             = "aac"
        bitrate_bps       = 64000
        channel_count     = 2
        channel_layout    = ["fl", "fr"]
        sample_rate_hertz = 48000
      }
    }
    mux_streams {
      key                = "sd"
      file_name          = "sd.mp4"
      container          = "mp4"
      elementary_streams = ["video-stream0", "audio-stream0"]
    }
    mux_streams {
      key                = "hd"
      file_name          = "hd.mp4"
      container          = "mp4"
      elementary_streams = ["video-stream1", "audio-stream0"]
    }
    pubsub_destination {
      topic = google_pubsub_topic.transcoder_notifications.id
    }
    output {
      uri = "gs://${google_storage_bucket.default.name}/outputs/"
    }
  }
  labels = {
    "label" = "key"
  }
}
`, context)
}

func TestAccTranscoderJob_transcoderJobEncryptionsExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckTranscoderJobDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccTranscoderJob_transcoderJobEncryptionsExample(context),
			},
			{
				ResourceName:            "google_transcoder_job.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"end_time", "labels", "location", "state", "template_id", "terraform_labels"},
			},
		},
	})
}

func testAccTranscoderJob_transcoderJobEncryptionsExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_storage_bucket" "default" {
  name          = "tf-test-transcoder-job%{random_suffix}"
  location      = "US"
  force_destroy = true

  uniform_bucket_level_access = true
  public_access_prevention = "enforced"
  provider = google-beta
}

resource "google_storage_bucket_object" "example_mp4" {
  name   = "example.mp4"
  source = "./test-fixtures/example.mp4"
  bucket = google_storage_bucket.default.name
  provider = google-beta
}

resource "google_secret_manager_secret" "encryption_key" {
  secret_id = "tf-test-transcoder-encryption-key%{random_suffix}"
  replication {
    auto {}
  }
  provider = google-beta
}

resource "google_secret_manager_secret_version" "encryption_key" {
  secret     = google_secret_manager_secret.encryption_key.name
  secret_data = "4A67F2C1B8E93A4F6D3E7890A1BC23DF"
  provider = google-beta
}

data "google_project" "project" {
  provider = google-beta
}

# this is required to allow the transcoder service identity to access the secret
resource "google_project_service_identity" "transcoder" {
  project = data.google_project.project.project_id
  service = "transcoder.googleapis.com"
  provider = google-beta
}

resource "google_secret_manager_secret_iam_member" "transcoder_encryption_key_accessor" {
  secret_id = google_secret_manager_secret.encryption_key.secret_id
  project = google_secret_manager_secret.encryption_key.project
  role = "roles/secretmanager.secretAccessor"
  member = "serviceAccount:${google_project_service_identity.transcoder.email}"
  provider = google-beta
}

resource "google_transcoder_job" "default" {
  location    = "us-central1"

  config {
    inputs {
      key = "input0"
      uri = "gs://${google_storage_bucket.default.name}/${google_storage_bucket_object.example_mp4.name}"
    }
    elementary_streams {
      key = "es_video"
      video_stream {
        h264 {
          profile      = "main"
          height_pixels = 600
          width_pixels  = 800
          bitrate_bps  = 1000000
          frame_rate   = 60
        }
      }
    }
    elementary_streams {
      key = "es_audio"
      audio_stream {
        codec        = "aac"
        channel_count = 2
        bitrate_bps  = 160000
      }
    }
    encryptions {
      id = "aes-128"
      secret_manager_key_source {
        secret_version = google_secret_manager_secret_version.encryption_key.name
      }
      drm_systems {
        clearkey {}
      }
      aes128 {}
    }
    encryptions {
      id = "cenc"
      secret_manager_key_source {
        secret_version = google_secret_manager_secret_version.encryption_key.name
      }
      drm_systems {
        widevine {}
      }
      mpeg_cenc {
        scheme = "cenc"
      }
    }
    encryptions {
      id = "cbcs"
      secret_manager_key_source {
        secret_version = google_secret_manager_secret_version.encryption_key.name
      }
      drm_systems {
        widevine {}
      }
      mpeg_cenc {
        scheme = "cbcs"
      }
    }
    mux_streams {
      key                 = "ts_aes128"
      container           = "ts"
      elementary_streams  = ["es_video", "es_audio"]
      segment_settings {
        segment_duration = "6s"
      }
      encryption_id = "aes-128"
    }
    mux_streams {
      key                 = "fmp4_cenc_video"
      container           = "fmp4"
      elementary_streams  = ["es_video"]
      segment_settings {
        segment_duration = "6s"
      }
      encryption_id = "cenc"
    }
    mux_streams {
      key                 = "fmp4_cenc_audio"
      container           = "fmp4"
      elementary_streams  = ["es_audio"]
      segment_settings {
        segment_duration = "6s"
      }
      encryption_id = "cenc"
    }
    mux_streams {
      key                 = "fmp4_cbcs_video"
      container           = "fmp4"
      elementary_streams  = ["es_video"]
      segment_settings {
        segment_duration = "6s"
      }
      encryption_id = "cbcs"
    }
    mux_streams {
      key                 = "fmp4_cbcs_audio"
      container           = "fmp4"
      elementary_streams  = ["es_audio"]
      segment_settings {
        segment_duration = "6s"
      }
      encryption_id = "cbcs"
    }
    manifests {
      file_name = "manifest_aes128.m3u8"
      type      = "HLS"
      mux_streams = ["ts_aes128"]
    }
    manifests {
      file_name = "manifest_cenc.mpd"
      type      = "DASH"
      mux_streams = ["fmp4_cenc_video", "fmp4_cenc_audio"]
    }
    manifests {
      file_name = "manifest_cbcs.mpd"
      type      = "DASH"
      mux_streams = ["fmp4_cbcs_video", "fmp4_cbcs_audio"]
    }
    output {
      uri = "gs://${google_storage_bucket.default.name}/outputs/"
    }
  }
  labels = {
    "label" = "key"
  }
  provider = google-beta
}
`, context)
}

func TestAccTranscoderJob_transcoderJobOverlaysExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckTranscoderJobDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccTranscoderJob_transcoderJobOverlaysExample(context),
			},
			{
				ResourceName:            "google_transcoder_job.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"end_time", "labels", "location", "state", "template_id", "terraform_labels"},
			},
		},
	})
}

func testAccTranscoderJob_transcoderJobOverlaysExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_storage_bucket" "default" {
  name          = "tf-test-transcoder-job%{random_suffix}"
  location      = "US"
  force_destroy = true

  uniform_bucket_level_access = true
  public_access_prevention = "enforced"
}

resource "google_storage_bucket_object" "example_mp4" {
  name   = "example.mp4"
  source = "./test-fixtures/example.mp4"
  bucket = google_storage_bucket.default.name
}

resource "google_storage_bucket_object" "overlay_png" {
  name   = "overlay.png"
  source = "./test-fixtures/overlay.png"
  bucket = google_storage_bucket.default.name
}

resource "google_transcoder_job" "default" {
  location    = "us-central1"

  config {
    inputs {
      key = "input0"
      uri = "gs://${google_storage_bucket.default.name}/${google_storage_bucket_object.example_mp4.name}"
    }
    edit_list {
      key               = "atom0"
      inputs            = ["input0"]
      start_time_offset = "0s"
    }
    ad_breaks {
      start_time_offset = "3.500s"
    }
    overlays {
      animations {
        animation_fade {
          fade_type         = "FADE_IN"
          start_time_offset = "1.500s"
          end_time_offset   = "3.500s"
          xy {
            x = 1
            y = 0.5
          }
        }
      }
      image {
        uri = "gs://${google_storage_bucket.default.name}/${google_storage_bucket_object.overlay_png.name}"
      }
    }
    elementary_streams {
      key = "video-stream0"
      video_stream {
        h264 {
          width_pixels      = 640
          height_pixels     = 360
          bitrate_bps       = 550000
          frame_rate        = 60
          pixel_format      = "yuv420p"
          rate_control_mode = "vbr"
          crf_level         = 21
          gop_duration      = "3s"
          vbv_size_bits     = 550000
          vbv_fullness_bits = 495000
          entropy_coder     = "cabac"
          profile           = "high"
          preset            = "veryfast"

        }
      }
    }
    elementary_streams {
      key = "video-stream1"
      video_stream {
        h264 {
          width_pixels      = 1280
          height_pixels     = 720
          bitrate_bps       = 550000
          frame_rate        = 60
          pixel_format      = "yuv420p"
          rate_control_mode = "vbr"
          crf_level         = 21
          gop_duration      = "3s"
          vbv_size_bits     = 2500000
          vbv_fullness_bits = 2250000
          entropy_coder     = "cabac"
          profile           = "high"
          preset            = "veryfast"
        }
      }
    }
    elementary_streams {
      key = "audio-stream0"
      audio_stream {
        codec             = "aac"
        bitrate_bps       = 64000
        channel_count     = 2
        channel_layout    = ["fl", "fr"]
        sample_rate_hertz = 48000
      }
    }
    mux_streams {
      key                = "sd"
      file_name          = "sd.mp4"
      container          = "mp4"
      elementary_streams = ["video-stream0", "audio-stream0"]
    }
    mux_streams {
      key                = "hd"
      file_name          = "hd.mp4"
      container          = "mp4"
      elementary_streams = ["video-stream1", "audio-stream0"]
    }
    output {
      uri = "gs://${google_storage_bucket.default.name}/outputs/"
    }
  }
  labels = {
    "label" = "key"
  }
}
`, context)
}

func TestAccTranscoderJob_transcoderJobManifestsExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckTranscoderJobDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccTranscoderJob_transcoderJobManifestsExample(context),
			},
			{
				ResourceName:            "google_transcoder_job.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"end_time", "labels", "location", "state", "template_id", "terraform_labels"},
			},
		},
	})
}

func testAccTranscoderJob_transcoderJobManifestsExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_storage_bucket" "default" {
  name          = "tf-test-transcoder-job%{random_suffix}"
  location      = "US"
  force_destroy = true

  uniform_bucket_level_access = true
  public_access_prevention = "enforced"
}

resource "google_storage_bucket_object" "example_mp4" {
  name   = "example.mp4"
  source = "./test-fixtures/example.mp4"
  bucket = google_storage_bucket.default.name
}

resource "google_transcoder_job" "default" {
  location    = "us-central1"

  config {
    inputs {
      key = "input0"
      uri = "gs://${google_storage_bucket.default.name}/${google_storage_bucket_object.example_mp4.name}"
    }

    edit_list {
      key               = "atom0"
      start_time_offset = "0s"
      inputs            = ["input0"]
    }

    ad_breaks {
      start_time_offset = "3.500s"
    }

    elementary_streams {
      key = "video-stream0"
      video_stream {
        h264 {
          width_pixels      = 640
          height_pixels     = 360
          bitrate_bps       = 550000
          frame_rate        = 60
          pixel_format      = "yuv420p"
          rate_control_mode = "vbr"
          crf_level         = 21
          gop_duration      = "3s"
          vbv_size_bits     = 550000
          vbv_fullness_bits = 495000
          entropy_coder     = "cabac"
          profile           = "high"
          preset            = "veryfast"

        }
      }
    }

    elementary_streams {
      key = "video-stream1"
      video_stream {
        h264 {
          width_pixels      = 1280
          height_pixels     = 720
          bitrate_bps       = 550000
          frame_rate        = 60
          pixel_format      = "yuv420p"
          rate_control_mode = "vbr"
          crf_level         = 21
          gop_duration      = "3s"
          vbv_size_bits     = 2500000
          vbv_fullness_bits = 2250000
          entropy_coder     = "cabac"
          profile           = "high"
          preset            = "veryfast"
        }
      }
    }
    
    elementary_streams {
      key = "audio-stream0"
      audio_stream {
        codec             = "aac"
        bitrate_bps       = 64000
        channel_count     = 2
        channel_layout    = ["fl", "fr"]
        sample_rate_hertz = 48000
      }
    }

    mux_streams {
      key                = "sd"
      file_name          = "sd.mp4"
      container          = "mp4"
      elementary_streams = ["video-stream0", "audio-stream0"]
    }

    mux_streams {
      key                = "hd"
      file_name          = "hd.mp4"
      container          = "mp4"
      elementary_streams = ["video-stream1", "audio-stream0"]
    }

    mux_streams {
      key                = "media-sd"
      file_name          = "media-sd.ts"
      container          = "ts"
      elementary_streams = ["video-stream0", "audio-stream0"]
    }

    mux_streams {
      key                = "media-hd"
      file_name          = "media-hd.ts"
      container          = "ts"
      elementary_streams = ["video-stream1", "audio-stream0"]
    }

    mux_streams {
      key                = "video-only-sd"
      file_name          = "video-only-sd.m4s"
      container          = "fmp4"
      elementary_streams = ["video-stream0"]
    }

    mux_streams {
      key                = "video-only-hd"
      file_name          = "video-only-hd.m4s"
      container          = "fmp4"
      elementary_streams = ["video-stream1"]
    }

    mux_streams {
      key                = "audio-only"
      file_name          = "audio-only.m4s"
      container          = "fmp4"
      elementary_streams = ["audio-stream0"]
    }

    manifests {
      file_name   = "manifest.m3u8"
      type        = "HLS"
      mux_streams = ["media-sd", "media-hd"]
    }

    manifests {
      file_name   = "manifest.mpd"
      type        = "DASH"
      mux_streams = ["video-only-sd", "video-only-hd", "audio-only"]
    }

    output {
      uri = "gs://${google_storage_bucket.default.name}/outputs/"
    }
  }
  labels = {
    "label" = "key"
  }
}
`, context)
}

func testAccCheckTranscoderJobDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_transcoder_job" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{TranscoderBasePath}}{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("TranscoderJob still exists at %s", url)
			}
		}

		return nil
	}
}

// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package firebasehosting_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/envvar"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccFirebaseHostingCustomDomain_firebasehostingCustomdomainBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":    envvar.GetTestProjectFromEnv(),
		"site_id":       envvar.GetTestProjectFromEnv(),
		"custom_domain": "basic.custom.domain.com",
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckFirebaseHostingCustomDomainDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseHostingCustomDomain_firebasehostingCustomdomainBasicExample(context),
			},
			{
				ResourceName:            "google_firebase_hosting_custom_domain.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"site_id", "custom_domain"},
			},
		},
	})
}

func testAccFirebaseHostingCustomDomain_firebasehostingCustomdomainBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firebase_hosting_custom_domain" "default" {
  provider = google-beta

  project  = "%{project_id}"
  site_id = "%{site_id}"
  custom_domain = "%{custom_domain}"
}
`, context)
}

func TestAccFirebaseHostingCustomDomain_firebasehostingCustomdomainFullExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":      envvar.GetTestProjectFromEnv(),
		"custom_domain":   "full.source.domain.com",
		"redirect_target": "destination.domain.com",
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckFirebaseHostingCustomDomainDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseHostingCustomDomain_firebasehostingCustomdomainFullExample(context),
			},
			{
				ResourceName:            "google_firebase_hosting_custom_domain.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"site_id", "custom_domain"},
			},
		},
	})
}

func testAccFirebaseHostingCustomDomain_firebasehostingCustomdomainFullExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firebase_hosting_site" "default" {
  provider = google-beta
  project  = "%{project_id}"

  site_id = "tf-test-site-id-full%{random_suffix}"
}

resource "google_firebase_hosting_custom_domain" "default" {
  provider = google-beta

  project  = "%{project_id}"
  site_id = google_firebase_hosting_site.default.site_id
  custom_domain = "%{custom_domain}"
  cert_preference = "GROUPED"
  redirect_target = "%{redirect_target}"

  wait_dns_verification = false
}
`, context)
}

func TestAccFirebaseHostingCustomDomain_firebasehostingCustomdomainCloudRunExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project_id":    envvar.GetTestProjectFromEnv(),
		"custom_domain": "run.custom.domain.com",
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckFirebaseHostingCustomDomainDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccFirebaseHostingCustomDomain_firebasehostingCustomdomainCloudRunExample(context),
			},
			{
				ResourceName:            "google_firebase_hosting_custom_domain.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"site_id", "custom_domain"},
			},
		},
	})
}

func testAccFirebaseHostingCustomDomain_firebasehostingCustomdomainCloudRunExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_firebase_hosting_site" "default" {
  provider = google-beta
  project  = "%{project_id}"
  site_id  = "tf-test-site-id%{random_suffix}"
}

resource "google_cloud_run_v2_service" "default" {
  provider = google-beta
  project  = "%{project_id}"
  name     = "tf-test-cloud-run-service-via-hosting%{random_suffix}"
  location = "us-central1"

  # Warning: allows all public traffic
  ingress = "INGRESS_TRAFFIC_ALL"

  template {
    containers {
      image = "us-docker.pkg.dev/cloudrun/container/hello"
    }
  }
}

resource "google_firebase_hosting_version" "default" {
  provider = google-beta
  site_id  = google_firebase_hosting_site.default.site_id
  config {
    rewrites {
      glob = "/hello/**"
      run {
        service_id = google_cloud_run_v2_service.default.name
        region = google_cloud_run_v2_service.default.location
      }
    }
  }
}

resource "google_firebase_hosting_release" "default" {
  provider     = google-beta
  site_id      = google_firebase_hosting_site.default.site_id
  version_name = google_firebase_hosting_version.default.name
  message      = "Cloud Run Integration"
}

resource "google_firebase_hosting_custom_domain" "default" {
  provider = google-beta

  project  = "%{project_id}"
  site_id  = google_firebase_hosting_site.default.site_id
  custom_domain = "%{custom_domain}"

  wait_dns_verification = false
}
`, context)
}

func testAccCheckFirebaseHostingCustomDomainDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_firebase_hosting_custom_domain" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{FirebaseHostingBasePath}}projects/{{project}}/sites/{{site_id}}/customDomains/{{custom_domain}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			resp, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil && resp["deleteTime"].(string) == "" {
				return fmt.Errorf("FirebaseHostingCustomDomain still exists at %s", url)
			}
		}

		return nil
	}
}

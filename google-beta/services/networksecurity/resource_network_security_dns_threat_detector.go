// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/networksecurity/DnsThreatDetector.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package networksecurity

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func ResourceNetworkSecurityDnsThreatDetector() *schema.Resource {
	return &schema.Resource{
		Create: resourceNetworkSecurityDnsThreatDetectorCreate,
		Read:   resourceNetworkSecurityDnsThreatDetectorRead,
		Update: resourceNetworkSecurityDnsThreatDetectorUpdate,
		Delete: resourceNetworkSecurityDnsThreatDetectorDelete,

		Importer: &schema.ResourceImporter{
			State: resourceNetworkSecurityDnsThreatDetectorImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.SetLabelsDiff,
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Name of the DnsThreatDetector resource.`,
			},
			"excluded_networks": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `List of networks that are excluded from detection. Format: projects/{project}/global/networks/{name}.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
				Description: `Set of label tags associated with the DNS Threat Detector resource.
An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.


**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"location": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `The location of the DNS Threat Detector. The only supported value is 'global'.`,
				Default:     "global",
			},
			"threat_detector_provider": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `DNS Threat Detection provider. The only supported value is 'INFOBLOX'.`,
			},
			"create_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The timestamp when the resource was created.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"`,
			},
			"effective_labels": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: `All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"terraform_labels": {
				Type:     schema.TypeMap,
				Computed: true,
				Description: `The combination of labels configured directly on the resource
 and default labels configured on the provider.`,
				Elem: &schema.Schema{Type: schema.TypeString},
			},
			"update_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The timestamp when the resource was updated.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceNetworkSecurityDnsThreatDetectorCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	threatDetectorProviderProp, err := expandNetworkSecurityDnsThreatDetectorThreatDetectorProvider(d.Get("threat_detector_provider"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("threat_detector_provider"); !tpgresource.IsEmptyValue(reflect.ValueOf(threatDetectorProviderProp)) && (ok || !reflect.DeepEqual(v, threatDetectorProviderProp)) {
		obj["provider"] = threatDetectorProviderProp
	}
	excludedNetworksProp, err := expandNetworkSecurityDnsThreatDetectorExcludedNetworks(d.Get("excluded_networks"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("excluded_networks"); !tpgresource.IsEmptyValue(reflect.ValueOf(excludedNetworksProp)) && (ok || !reflect.DeepEqual(v, excludedNetworksProp)) {
		obj["excludedNetworks"] = excludedNetworksProp
	}
	effectiveLabelsProp, err := expandNetworkSecurityDnsThreatDetectorEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(effectiveLabelsProp)) && (ok || !reflect.DeepEqual(v, effectiveLabelsProp)) {
		obj["labels"] = effectiveLabelsProp
	}
	nameProp, err := expandNetworkSecurityDnsThreatDetectorName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkSecurityBasePath}}projects/{{project}}/locations/{{location}}/dnsThreatDetectors?dnsThreatDetectorId={{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new DnsThreatDetector: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for DnsThreatDetector: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating DnsThreatDetector: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/dnsThreatDetectors/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating DnsThreatDetector %q: %#v", d.Id(), res)

	return resourceNetworkSecurityDnsThreatDetectorRead(d, meta)
}

func resourceNetworkSecurityDnsThreatDetectorRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkSecurityBasePath}}projects/{{project}}/locations/{{location}}/dnsThreatDetectors/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for DnsThreatDetector: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("NetworkSecurityDnsThreatDetector %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading DnsThreatDetector: %s", err)
	}

	if err := d.Set("threat_detector_provider", flattenNetworkSecurityDnsThreatDetectorThreatDetectorProvider(res["provider"], d, config)); err != nil {
		return fmt.Errorf("Error reading DnsThreatDetector: %s", err)
	}
	if err := d.Set("excluded_networks", flattenNetworkSecurityDnsThreatDetectorExcludedNetworks(res["excludedNetworks"], d, config)); err != nil {
		return fmt.Errorf("Error reading DnsThreatDetector: %s", err)
	}
	if err := d.Set("create_time", flattenNetworkSecurityDnsThreatDetectorCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading DnsThreatDetector: %s", err)
	}
	if err := d.Set("update_time", flattenNetworkSecurityDnsThreatDetectorUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading DnsThreatDetector: %s", err)
	}
	if err := d.Set("labels", flattenNetworkSecurityDnsThreatDetectorLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading DnsThreatDetector: %s", err)
	}
	if err := d.Set("terraform_labels", flattenNetworkSecurityDnsThreatDetectorTerraformLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading DnsThreatDetector: %s", err)
	}
	if err := d.Set("effective_labels", flattenNetworkSecurityDnsThreatDetectorEffectiveLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading DnsThreatDetector: %s", err)
	}
	if err := d.Set("name", flattenNetworkSecurityDnsThreatDetectorName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading DnsThreatDetector: %s", err)
	}

	return nil
}

func resourceNetworkSecurityDnsThreatDetectorUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for DnsThreatDetector: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	excludedNetworksProp, err := expandNetworkSecurityDnsThreatDetectorExcludedNetworks(d.Get("excluded_networks"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("excluded_networks"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, excludedNetworksProp)) {
		obj["excludedNetworks"] = excludedNetworksProp
	}
	effectiveLabelsProp, err := expandNetworkSecurityDnsThreatDetectorEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, effectiveLabelsProp)) {
		obj["labels"] = effectiveLabelsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkSecurityBasePath}}projects/{{project}}/locations/{{location}}/dnsThreatDetectors/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating DnsThreatDetector %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("excluded_networks") {
		updateMask = append(updateMask, "excludedNetworks")
	}

	if d.HasChange("effective_labels") {
		updateMask = append(updateMask, "labels")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating DnsThreatDetector %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating DnsThreatDetector %q: %#v", d.Id(), res)
		}

	}

	return resourceNetworkSecurityDnsThreatDetectorRead(d, meta)
}

func resourceNetworkSecurityDnsThreatDetectorDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for DnsThreatDetector: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{NetworkSecurityBasePath}}projects/{{project}}/locations/{{location}}/dnsThreatDetectors/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting DnsThreatDetector %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "DnsThreatDetector")
	}

	log.Printf("[DEBUG] Finished deleting DnsThreatDetector %q: %#v", d.Id(), res)
	return nil
}

func resourceNetworkSecurityDnsThreatDetectorImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/dnsThreatDetectors/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/dnsThreatDetectors/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenNetworkSecurityDnsThreatDetectorThreatDetectorProvider(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityDnsThreatDetectorExcludedNetworks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityDnsThreatDetectorCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityDnsThreatDetectorUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityDnsThreatDetectorLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkSecurityDnsThreatDetectorTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkSecurityDnsThreatDetectorEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityDnsThreatDetectorName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.GetResourceNameFromSelfLink(v.(string))
}

func expandNetworkSecurityDnsThreatDetectorThreatDetectorProvider(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityDnsThreatDetectorExcludedNetworks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandNetworkSecurityDnsThreatDetectorEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandNetworkSecurityDnsThreatDetectorName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

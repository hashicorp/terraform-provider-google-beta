// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package saasruntime_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/envvar"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccSaasRuntimeUnitKind_saasRuntimeUnitKindBasicExample(t *testing.T) {
	t.Parallel()
	acctest.BootstrapIamMembers(t, []acctest.IamMember{
		{
			Member: "serviceAccount:service-{project_number}@gcp-sa-saasservicemgmt.iam.gserviceaccount.com",
			Role:   "roles/saasservicemgmt.serviceAgent",
		},
	})

	context := map[string]interface{}{
		"project":       envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckSaasRuntimeUnitKindDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccSaasRuntimeUnitKind_saasRuntimeUnitKindBasicExample(context),
			},
			{
				ResourceName:            "google_saas_runtime_unit_kind.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "labels", "location", "terraform_labels", "unit_kind_id"},
			},
		},
	})
}

func testAccSaasRuntimeUnitKind_saasRuntimeUnitKindBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_saas_runtime_saas" "example_saas" {
  provider = google-beta
  saas_id  = "tf-test-example-saas%{random_suffix}"
  location = "us-east1"

  locations {
    name = "us-east1"
  }
}

resource "google_saas_runtime_unit_kind" "cluster_unit_kind" {
  provider = google-beta
  location = "us-east1"
  unit_kind_id = "tf-test-cluster-unitkind%{random_suffix}"
  saas = google_saas_runtime_saas.example_saas.id
  default_release = "projects/%{project}/locations/us-east1/releases/tf-test-example-release%{random_suffix}"
}

resource "google_saas_runtime_unit_kind" "example" {
  provider = google-beta
  location = "us-east1"
  unit_kind_id = "tf-test-app-unitkind%{random_suffix}"
  saas = google_saas_runtime_saas.example_saas.id

  dependencies {
    unit_kind = google_saas_runtime_unit_kind.cluster_unit_kind.id
    alias     = "cluster"
  }
}

resource "google_saas_runtime_release" "example_release" {
  provider          = google-beta
  location          = "us-east1"
  release_id        = "tf-test-example-release%{random_suffix}"
  unit_kind         = google_saas_runtime_unit_kind.cluster_unit_kind.id
  blueprint {
    package = "us-central1-docker.pkg.dev/ci-test-project-188019/test-repo/tf-test-easysaas-alpha-image@sha256:7992fdbaeaf998ecd31a7f937bb26e38a781ecf49b24857a6176c1e9bfc299ee"
  }
}
`, context)
}

func testAccCheckSaasRuntimeUnitKindDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_saas_runtime_unit_kind" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{SaasRuntimeBasePath}}projects/{{project}}/locations/{{location}}/unitKinds/{{unit_kind_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("SaasRuntimeUnitKind still exists at %s", url)
			}
		}

		return nil
	}
}

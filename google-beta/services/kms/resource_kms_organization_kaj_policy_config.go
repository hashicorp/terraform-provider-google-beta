// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/kms/OrganizationKajPolicyConfig.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package kms

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"
)

func ResourceKMSOrganizationKajPolicyConfig() *schema.Resource {
	return &schema.Resource{
		Create: resourceKMSOrganizationKajPolicyConfigCreate,
		Read:   resourceKMSOrganizationKajPolicyConfigRead,
		Update: resourceKMSOrganizationKajPolicyConfigUpdate,
		Delete: resourceKMSOrganizationKajPolicyConfigDelete,

		Importer: &schema.ResourceImporter{
			State: resourceKMSOrganizationKajPolicyConfigImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"organization": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The organization number for which to retrieve config.`,
			},
			"default_key_access_justification_policy": {
				Type:     schema.TypeList,
				Optional: true,
				Description: `The default key access justification policy used when a CryptoKey is
created in this organization. This is only used when a Key Access Justifications
policy is not provided in the CreateCryptoKeyRequest.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"allowed_access_reasons": {
							Type:     schema.TypeList,
							Optional: true,
							Description: `A KeyAccessJustificationsPolicy specifies zero or more allowed
AccessReason values for encrypt, decrypt, and sign operations on a
CryptoKey. Possible values: ["CUSTOMER_INITIATED_SUPPORT", "GOOGLE_INITIATED_SERVICE", "THIRD_PARTY_DATA_REQUEST", "GOOGLE_INITIATED_REVIEW", "CUSTOMER_INITIATED_ACCESS", "GOOGLE_INITIATED_SYSTEM_OPERATION", "REASON_NOT_EXPECTED", "MODIFIED_CUSTOMER_INITIATED_ACCESS", "MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION", "GOOGLE_RESPONSE_TO_PRODUCTION_ALERT", "CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING"]`,
							Elem: &schema.Schema{
								Type:         schema.TypeString,
								ValidateFunc: verify.ValidateEnum([]string{"CUSTOMER_INITIATED_SUPPORT", "GOOGLE_INITIATED_SERVICE", "THIRD_PARTY_DATA_REQUEST", "GOOGLE_INITIATED_REVIEW", "CUSTOMER_INITIATED_ACCESS", "GOOGLE_INITIATED_SYSTEM_OPERATION", "REASON_NOT_EXPECTED", "MODIFIED_CUSTOMER_INITIATED_ACCESS", "MODIFIED_GOOGLE_INITIATED_SYSTEM_OPERATION", "GOOGLE_RESPONSE_TO_PRODUCTION_ALERT", "CUSTOMER_AUTHORIZED_WORKFLOW_SERVICING"}),
							},
						},
					},
				},
			},
		},
		UseJSONNumber: true,
	}
}

func resourceKMSOrganizationKajPolicyConfigCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	defaultKeyAccessJustificationPolicyProp, err := expandKMSOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy(d.Get("default_key_access_justification_policy"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("default_key_access_justification_policy"); !tpgresource.IsEmptyValue(reflect.ValueOf(defaultKeyAccessJustificationPolicyProp)) && (ok || !reflect.DeepEqual(v, defaultKeyAccessJustificationPolicyProp)) {
		obj["defaultKeyAccessJustificationPolicy"] = defaultKeyAccessJustificationPolicyProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{KMSBasePath}}organizations/{{organization}}/kajPolicyConfig?updateMask=defaultKeyAccessJustificationPolicy")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new OrganizationKajPolicyConfig: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating OrganizationKajPolicyConfig: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "organizations/{{organization}}/kajPolicyConfig")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// This is useful if the resource in question doesn't have a perfectly consistent API
	// That is, the Operation for Create might return before the Get operation shows the
	// completed state of the resource.
	time.Sleep(1 * time.Minute)

	log.Printf("[DEBUG] Finished creating OrganizationKajPolicyConfig %q: %#v", d.Id(), res)

	return resourceKMSOrganizationKajPolicyConfigRead(d, meta)
}

func resourceKMSOrganizationKajPolicyConfigRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{KMSBasePath}}organizations/{{organization}}/kajPolicyConfig")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("KMSOrganizationKajPolicyConfig %q", d.Id()))
	}

	if err := d.Set("default_key_access_justification_policy", flattenKMSOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy(res["defaultKeyAccessJustificationPolicy"], d, config)); err != nil {
		return fmt.Errorf("Error reading OrganizationKajPolicyConfig: %s", err)
	}

	return nil
}

func resourceKMSOrganizationKajPolicyConfigUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	defaultKeyAccessJustificationPolicyProp, err := expandKMSOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy(d.Get("default_key_access_justification_policy"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("default_key_access_justification_policy"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, defaultKeyAccessJustificationPolicyProp)) {
		obj["defaultKeyAccessJustificationPolicy"] = defaultKeyAccessJustificationPolicyProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{KMSBasePath}}organizations/{{organization}}/kajPolicyConfig?updateMask=defaultKeyAccessJustificationPolicy")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating OrganizationKajPolicyConfig %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error updating OrganizationKajPolicyConfig %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating OrganizationKajPolicyConfig %q: %#v", d.Id(), res)
	}

	// This is useful if the resource in question doesn't have a perfectly consistent API
	// That is, the Operation for Create might return before the Get operation shows the
	// completed state of the resource.
	time.Sleep(1 * time.Minute)
	return resourceKMSOrganizationKajPolicyConfigRead(d, meta)
}

func resourceKMSOrganizationKajPolicyConfigDelete(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[WARNING] KMS OrganizationKajPolicyConfig resources"+
		" cannot be deleted from Google Cloud. The resource %s will be removed from Terraform"+
		" state, but will still be present on Google Cloud.", d.Id())
	d.SetId("")

	return nil
}

func resourceKMSOrganizationKajPolicyConfigImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^organizations/(?P<organization>[^/]+)/kajPolicyConfig$",
		"^(?P<organization>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "organizations/{{organization}}/kajPolicyConfig")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenKMSOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["allowed_access_reasons"] =
		flattenKMSOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyAllowedAccessReasons(original["allowedAccessReasons"], d, config)
	return []interface{}{transformed}
}
func flattenKMSOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyAllowedAccessReasons(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandKMSOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllowedAccessReasons, err := expandKMSOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyAllowedAccessReasons(original["allowed_access_reasons"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowedAccessReasons); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["allowedAccessReasons"] = transformedAllowedAccessReasons
	}

	return transformed, nil
}

func expandKMSOrganizationKajPolicyConfigDefaultKeyAccessJustificationPolicyAllowedAccessReasons(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/tpuv2/QueuedResource.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package tpuv2

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func ResourceTpuV2QueuedResource() *schema.Resource {
	return &schema.Resource{
		Create: resourceTpuV2QueuedResourceCreate,
		Read:   resourceTpuV2QueuedResourceRead,
		Delete: resourceTpuV2QueuedResourceDelete,

		Importer: &schema.ResourceImporter{
			State: resourceTpuV2QueuedResourceImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The immutable name of the Queued Resource.`,
			},
			"tpu": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `Defines a TPU resource.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"node_spec": {
							Type:        schema.TypeList,
							Optional:    true,
							ForceNew:    true,
							Description: `The TPU node(s) being requested.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"node": {
										Type:        schema.TypeList,
										Required:    true,
										ForceNew:    true,
										Description: `The node.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"runtime_version": {
													Type:        schema.TypeString,
													Required:    true,
													ForceNew:    true,
													Description: `Runtime version for the TPU.`,
												},
												"accelerator_type": {
													Type:        schema.TypeString,
													Computed:    true,
													Optional:    true,
													ForceNew:    true,
													Description: `TPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.`,
												},
												"description": {
													Type:        schema.TypeString,
													Optional:    true,
													ForceNew:    true,
													Description: `Text description of the TPU.`,
												},
												"network_config": {
													Type:        schema.TypeList,
													Computed:    true,
													Optional:    true,
													ForceNew:    true,
													Description: `Network configurations for the TPU node.`,
													MaxItems:    1,
													Elem: &schema.Resource{
														Schema: map[string]*schema.Schema{
															"can_ip_forward": {
																Type:     schema.TypeBool,
																Optional: true,
																ForceNew: true,
																Description: `Allows the TPU node to send and receive packets with non-matching destination or source
IPs. This is required if you plan to use the TPU workers to forward routes.`,
															},
															"enable_external_ips": {
																Type:     schema.TypeBool,
																Optional: true,
																ForceNew: true,
																Description: `Indicates that external IP addresses would be associated with the TPU workers. If set to
false, the specified subnetwork or network should have Private Google Access enabled.`,
															},
															"network": {
																Type:     schema.TypeString,
																Computed: true,
																Optional: true,
																ForceNew: true,
																Description: `The name of the network for the TPU node. It must be a preexisting Google Compute Engine
network. If none is provided, "default" will be used.`,
															},
															"queue_count": {
																Type:        schema.TypeInt,
																Optional:    true,
																ForceNew:    true,
																Description: `Specifies networking queue count for TPU VM instance's network interface.`,
															},
															"subnetwork": {
																Type:     schema.TypeString,
																Computed: true,
																Optional: true,
																ForceNew: true,
																Description: `The name of the subnetwork for the TPU node. It must be a preexisting Google Compute
Engine subnetwork. If none is provided, "default" will be used.`,
															},
														},
													},
												},
											},
										},
									},
									"parent": {
										Type:             schema.TypeString,
										Required:         true,
										ForceNew:         true,
										DiffSuppressFunc: tpgresource.ProjectNumberDiffSuppress,
										Description:      `The parent resource name.`,
									},
									"node_id": {
										Type:        schema.TypeString,
										Optional:    true,
										ForceNew:    true,
										Description: `Unqualified node identifier used to identify the node in the project once provisioned.`,
									},
								},
							},
						},
					},
				},
			},
			"zone": {
				Type:        schema.TypeString,
				Computed:    true,
				Optional:    true,
				ForceNew:    true,
				Description: `The GCP location for the Queued Resource. If it is not provided, the provider zone is used.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceTpuV2QueuedResourceCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	nameProp, err := expandTpuV2QueuedResourceName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	tpuProp, err := expandTpuV2QueuedResourceTpu(d.Get("tpu"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("tpu"); !tpgresource.IsEmptyValue(reflect.ValueOf(tpuProp)) && (ok || !reflect.DeepEqual(v, tpuProp)) {
		obj["tpu"] = tpuProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{TpuV2BasePath}}projects/{{project}}/locations/{{zone}}/queuedResources?queuedResourceId={{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new QueuedResource: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for QueuedResource: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating QueuedResource: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{zone}}/queuedResources/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = TpuV2OperationWaitTime(
		config, res, project, "Creating QueuedResource", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create QueuedResource: %s", err)
	}

	log.Printf("[DEBUG] Finished creating QueuedResource %q: %#v", d.Id(), res)

	return resourceTpuV2QueuedResourceRead(d, meta)
}

func resourceTpuV2QueuedResourceRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{TpuV2BasePath}}projects/{{project}}/locations/{{zone}}/queuedResources/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for QueuedResource: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("TpuV2QueuedResource %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading QueuedResource: %s", err)
	}

	if err := d.Set("name", flattenTpuV2QueuedResourceName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading QueuedResource: %s", err)
	}
	if err := d.Set("tpu", flattenTpuV2QueuedResourceTpu(res["tpu"], d, config)); err != nil {
		return fmt.Errorf("Error reading QueuedResource: %s", err)
	}

	return nil
}

func resourceTpuV2QueuedResourceDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for QueuedResource: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{TpuV2BasePath}}projects/{{project}}/locations/{{zone}}/queuedResources/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting QueuedResource %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "QueuedResource")
	}

	err = TpuV2OperationWaitTime(
		config, res, project, "Deleting QueuedResource", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting QueuedResource %q: %#v", d.Id(), res)
	return nil
}

func resourceTpuV2QueuedResourceImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<zone>[^/]+)/queuedResources/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<zone>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<zone>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{zone}}/queuedResources/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenTpuV2QueuedResourceName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.GetResourceNameFromSelfLink(v.(string))
}

func flattenTpuV2QueuedResourceTpu(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["node_spec"] =
		flattenTpuV2QueuedResourceTpuNodeSpec(original["nodeSpec"], d, config)
	return []interface{}{transformed}
}
func flattenTpuV2QueuedResourceTpuNodeSpec(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"parent":  flattenTpuV2QueuedResourceTpuNodeSpecParent(original["parent"], d, config),
			"node_id": flattenTpuV2QueuedResourceTpuNodeSpecNodeId(original["nodeId"], d, config),
			"node":    flattenTpuV2QueuedResourceTpuNodeSpecNode(original["node"], d, config),
		})
	}
	return transformed
}
func flattenTpuV2QueuedResourceTpuNodeSpecParent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2QueuedResourceTpuNodeSpecNodeId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2QueuedResourceTpuNodeSpecNode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["runtime_version"] =
		flattenTpuV2QueuedResourceTpuNodeSpecNodeRuntimeVersion(original["runtimeVersion"], d, config)
	transformed["accelerator_type"] =
		flattenTpuV2QueuedResourceTpuNodeSpecNodeAcceleratorType(original["acceleratorType"], d, config)
	transformed["description"] =
		flattenTpuV2QueuedResourceTpuNodeSpecNodeDescription(original["description"], d, config)
	transformed["network_config"] =
		flattenTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfig(original["networkConfig"], d, config)
	return []interface{}{transformed}
}
func flattenTpuV2QueuedResourceTpuNodeSpecNodeRuntimeVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2QueuedResourceTpuNodeSpecNodeAcceleratorType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2QueuedResourceTpuNodeSpecNodeDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["network"] =
		flattenTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigNetwork(original["network"], d, config)
	transformed["subnetwork"] =
		flattenTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigSubnetwork(original["subnetwork"], d, config)
	transformed["enable_external_ips"] =
		flattenTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigEnableExternalIps(original["enableExternalIps"], d, config)
	transformed["can_ip_forward"] =
		flattenTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigCanIpForward(original["canIpForward"], d, config)
	transformed["queue_count"] =
		flattenTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigQueueCount(original["queueCount"], d, config)
	return []interface{}{transformed}
}
func flattenTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigSubnetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigEnableExternalIps(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigCanIpForward(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigQueueCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func expandTpuV2QueuedResourceName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpu(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNodeSpec, err := expandTpuV2QueuedResourceTpuNodeSpec(original["node_spec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNodeSpec); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["nodeSpec"] = transformedNodeSpec
	}

	return transformed, nil
}

func expandTpuV2QueuedResourceTpuNodeSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedParent, err := expandTpuV2QueuedResourceTpuNodeSpecParent(original["parent"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedParent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["parent"] = transformedParent
		}

		transformedNodeId, err := expandTpuV2QueuedResourceTpuNodeSpecNodeId(original["node_id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedNodeId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["nodeId"] = transformedNodeId
		}

		transformedNode, err := expandTpuV2QueuedResourceTpuNodeSpecNode(original["node"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedNode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["node"] = transformedNode
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecParent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRuntimeVersion, err := expandTpuV2QueuedResourceTpuNodeSpecNodeRuntimeVersion(original["runtime_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRuntimeVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runtimeVersion"] = transformedRuntimeVersion
	}

	transformedAcceleratorType, err := expandTpuV2QueuedResourceTpuNodeSpecNodeAcceleratorType(original["accelerator_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAcceleratorType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["acceleratorType"] = transformedAcceleratorType
	}

	transformedDescription, err := expandTpuV2QueuedResourceTpuNodeSpecNodeDescription(original["description"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["description"] = transformedDescription
	}

	transformedNetworkConfig, err := expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfig(original["network_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetworkConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["networkConfig"] = transformedNetworkConfig
	}

	return transformed, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeRuntimeVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeAcceleratorType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedNetwork, err := expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigNetwork(original["network"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["network"] = transformedNetwork
	}

	transformedSubnetwork, err := expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigSubnetwork(original["subnetwork"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSubnetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["subnetwork"] = transformedSubnetwork
	}

	transformedEnableExternalIps, err := expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigEnableExternalIps(original["enable_external_ips"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["enableExternalIps"] = transformedEnableExternalIps
	}

	transformedCanIpForward, err := expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigCanIpForward(original["can_ip_forward"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["canIpForward"] = transformedCanIpForward
	}

	transformedQueueCount, err := expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigQueueCount(original["queue_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedQueueCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["queueCount"] = transformedQueueCount
	}

	return transformed, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigSubnetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigEnableExternalIps(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigCanIpForward(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandTpuV2QueuedResourceTpuNodeSpecNodeNetworkConfigQueueCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

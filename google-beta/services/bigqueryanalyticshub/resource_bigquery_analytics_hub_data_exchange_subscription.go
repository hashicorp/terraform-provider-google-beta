// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/bigqueryanalyticshub/DataExchangeSubscription.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package bigqueryanalyticshub

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"
)

func ResourceBigqueryAnalyticsHubDataExchangeSubscription() *schema.Resource {
	return &schema.Resource{
		Create: resourceBigqueryAnalyticsHubDataExchangeSubscriptionCreate,
		Read:   resourceBigqueryAnalyticsHubDataExchangeSubscriptionRead,
		Update: resourceBigqueryAnalyticsHubDataExchangeSubscriptionUpdate,
		Delete: resourceBigqueryAnalyticsHubDataExchangeSubscriptionDelete,

		Importer: &schema.ResourceImporter{
			State: resourceBigqueryAnalyticsHubDataExchangeSubscriptionImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Identity: &schema.ResourceIdentity{
			Version: 1,
			SchemaFunc: func() map[string]*schema.Schema {
				return map[string]*schema.Schema{
					"location": {
						Type:              schema.TypeString,
						RequiredForImport: true,
					},
					"subscription_id": {
						Type:              schema.TypeString,
						RequiredForImport: true,
					},
					"project": {
						Type:              schema.TypeString,
						OptionalForImport: true,
					},
				}
			},
		},
		Schema: map[string]*schema.Schema{
			"data_exchange_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.`,
			},
			"data_exchange_location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The name of the location of the Data Exchange.`,
			},
			"data_exchange_project": {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				DiffSuppressFunc: tpgresource.ProjectNumberDiffSuppress,
				Description:      `The ID of the Google Cloud project where the Data Exchange is located.`,
			},
			"location": {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				DiffSuppressFunc: tpgresource.CaseDiffSuppress,
				Description: `The geographic location where the Subscription (and its linked dataset) should reside.
This is the subscriber's desired location for the created resources.
See https://cloud.google.com/bigquery/docs/locations for supported locations.`,
			},
			"subscription_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Name of the subscription to create.`,
			},
			"destination_dataset": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: `BigQuery destination dataset to create for the subscriber.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"dataset_reference": {
							Type:        schema.TypeList,
							Required:    true,
							ForceNew:    true,
							Description: `A reference that identifies the destination dataset.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"dataset_id": {
										Type:        schema.TypeString,
										Required:    true,
										ForceNew:    true,
										Description: `A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.`,
									},
									"project_id": {
										Type:             schema.TypeString,
										Required:         true,
										ForceNew:         true,
										DiffSuppressFunc: tpgresource.ProjectNumberDiffSuppress,
										Description:      `The ID of the project containing this dataset.`,
									},
								},
							},
						},
						"location": {
							Type:             schema.TypeString,
							Required:         true,
							ForceNew:         true,
							DiffSuppressFunc: tpgresource.CaseDiffSuppress,
							Description: `The geographic location where the dataset should reside.
See https://cloud.google.com/bigquery/docs/locations for supported locations.`,
						},
						"description": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `A user-friendly description of the dataset.`,
						},
						"friendly_name": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `A descriptive name for the dataset.`,
						},
						"labels": {
							Type:     schema.TypeMap,
							Optional: true,
							ForceNew: true,
							Description: `The labels associated with this dataset. You can use these to
organize and group your datasets.`,
							Elem: &schema.Schema{Type: schema.TypeString},
						},
					},
				},
			},
			"subscriber_contact": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `Email of the subscriber.`,
			},
			"creation_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Timestamp when the subscription was created.`,
			},
			"data_exchange": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Output only. Resource name of the source Data Exchange. e.g. projects/123/locations/us/dataExchanges/456`,
			},
			"last_modify_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Timestamp when the subscription was last modified.`,
			},
			"linked_dataset_map": {
				Type:     schema.TypeSet,
				Computed: true,
				Description: `Output only. Map of listing resource names to associated linked resource,
e.g. projects/123/locations/us/dataExchanges/456/listings/789 -> projects/123/datasets/my_dataset
For Data Exchange subscriptions, this map may contain multiple entries if the Data Exchange has multiple listings.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"resource_name": {
							Type:     schema.TypeString,
							Required: true,
						},
						"linked_dataset": {
							Type:         schema.TypeString,
							Computed:     true,
							Description:  `Output only. Name of the linked dataset, e.g. projects/subscriberproject/datasets/linkedDataset`,
							ExactlyOneOf: []string{},
						},
						"linked_pubsub_subscription": {
							Type:         schema.TypeString,
							Computed:     true,
							Description:  `Output only. Name of the Pub/Sub subscription, e.g. projects/subscriberproject/subscriptions/subscriptions/sub_id`,
							ExactlyOneOf: []string{},
						},
						"listing": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Output only. Listing for which linked resource is created.`,
						},
					},
				},
			},
			"linked_resources": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Output only. Linked resources created in the subscription. Only contains values if state = STATE_ACTIVE.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"linked_dataset": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Output only. Name of the linked dataset, e.g. projects/subscriberproject/datasets/linkedDataset`,
						},
						"listing": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Output only. Listing for which linked resource is created.`,
						},
					},
				},
			},
			"log_linked_dataset_query_user_email": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Output only. By default, false. If true, the Subscriber agreed to the email sharing mandate that is enabled for DataExchange/Listing.`,
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The resource name of the subscription. e.g. "projects/myproject/locations/us/subscriptions/123"`,
			},
			"organization_display_name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Display name of the project of this subscription.`,
			},
			"organization_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Organization of the project this subscription belongs to.`,
			},
			"resource_type": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Listing shared asset type.`,
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Current state of the subscription.`,
			},
			"refresh_policy": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: verify.ValidateEnum([]string{"ON_READ", "ON_STALE", "NEVER", ""}),
				Description: `Controls when the subscription is automatically refreshed by the provider.
* 'ON_READ': Default value if not specified. The subscription will be refreshed every time Terraform performs a read operation (e.g., 'terraform plan', 'terraform apply', 'terraform refresh'). This ensures the state is always up-to-date.
* 'ON_STALE': The subscription will only be refreshed when its reported 'state' (an output-only field from the API) is 'STATE_STALE' during a Terraform read operation.
* 'NEVER': The provider will not automatically refresh the subscription. Default value: "ON_READ" Possible values: ["ON_READ", "ON_STALE", "NEVER"]`,
				Default: "ON_READ",
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceBigqueryAnalyticsHubDataExchangeSubscriptionCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	subscriptionIdProp, err := expandBigqueryAnalyticsHubDataExchangeSubscriptionSubscriptionId(d.Get("subscription_id"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("subscription_id"); !tpgresource.IsEmptyValue(reflect.ValueOf(subscriptionIdProp)) && (ok || !reflect.DeepEqual(v, subscriptionIdProp)) {
		obj["subscriptionId"] = subscriptionIdProp
	}
	subscriberContactProp, err := expandBigqueryAnalyticsHubDataExchangeSubscriptionSubscriberContact(d.Get("subscriber_contact"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("subscriber_contact"); !tpgresource.IsEmptyValue(reflect.ValueOf(subscriberContactProp)) && (ok || !reflect.DeepEqual(v, subscriberContactProp)) {
		obj["subscriberContact"] = subscriberContactProp
	}
	destinationDatasetProp, err := expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDataset(d.Get("destination_dataset"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("destination_dataset"); !tpgresource.IsEmptyValue(reflect.ValueOf(destinationDatasetProp)) && (ok || !reflect.DeepEqual(v, destinationDatasetProp)) {
		obj["destinationDataset"] = destinationDatasetProp
	}

	obj, err = resourceBigqueryAnalyticsHubDataExchangeSubscriptionEncoder(d, meta, obj)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BigqueryAnalyticsHubBasePath}}projects/{{data_exchange_project}}/locations/{{data_exchange_location}}/dataExchanges/{{data_exchange_id}}:subscribe")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new DataExchangeSubscription: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for DataExchangeSubscription: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating DataExchangeSubscription: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating DataExchangeSubscription %q: %#v", d.Id(), res)

	return resourceBigqueryAnalyticsHubDataExchangeSubscriptionRead(d, meta)
}

func resourceBigqueryAnalyticsHubDataExchangeSubscriptionRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{BigqueryAnalyticsHubBasePath}}projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for DataExchangeSubscription: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("BigqueryAnalyticsHubDataExchangeSubscription %q", d.Id()))
	}
	var currentState string
	if stateVal, ok := d.GetOk("state"); ok {
		if s, isString := stateVal.(string); isString {
			currentState = s
		} else {
			log.Printf("[WARN] BigQuery Analytics Hub Subscription (ID: %s): 'state' attribute is present but not a string. Value: %#v. Assuming empty state for refresh logic.", d.Id(), stateVal)
			currentState = "" // Treat as empty if type assertion fails
		}
	} else {
		// 'state' attribute is missing entirely from resource data
		log.Printf("[WARN] BigQuery Analytics Hub Subscription (ID: %s): 'state' attribute is missing from resource data. Assuming empty state for refresh logic.", d.Id())
		currentState = "" // Treat as empty if missing
	}

	// Get the value of the 'refresh_policy' enum field
	refreshPolicy := d.Get("refresh_policy").(string)

	// Determine if the refresh API call should be triggered based on the new policy
	shouldTriggerRefreshAPI := false
	if refreshPolicy == "ON_READ" {
		shouldTriggerRefreshAPI = true
	} else if refreshPolicy == "ON_STALE" {
		shouldTriggerRefreshAPI = (currentState == "STATE_STALE")
	} // If refreshPolicy is "NEVER", shouldTriggerRefreshAPI remains false.

	if shouldTriggerRefreshAPI {
		log.Printf("[DEBUG] Attempting to refresh BigQuery Analytics Hub Subscription %q (ID: %s)", d.Get("name").(string), d.Id())

		refreshUrl, err := tpgresource.ReplaceVars(d, config, "{{BigqueryAnalyticsHubBasePath}}projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}:refresh")
		if err != nil {
			return fmt.Errorf("Error constructing refresh URL for DataExchangeSubscription %q: %s", d.Id(), err)
		}

		refreshBodyMap := map[string]any{}
		refreshHeaders := make(http.Header)
		refreshHeaders.Set("Content-Type", "application/json")

		_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "POST",
			Project:   billingProject,
			RawURL:    refreshUrl,
			UserAgent: userAgent,
			Headers:   refreshHeaders,
			Body:      refreshBodyMap,
		})

		if err != nil {
			return fmt.Errorf("Error performing refresh for BigQuery Analytics Hub Subscription %q : %s", d.Id(), err)
		}
	}

	res, err = resourceBigqueryAnalyticsHubDataExchangeSubscriptionDecoder(d, meta, res)
	if err != nil {
		return err
	}

	if res == nil {
		// Decoding the object has resulted in it being gone. It may be marked deleted
		log.Printf("[DEBUG] Removing BigqueryAnalyticsHubDataExchangeSubscription because it no longer exists.")
		d.SetId("")
		return nil
	}

	// Explicitly set virtual fields to default values if unset
	if _, ok := d.GetOkExists("refresh_policy"); !ok {
		if err := d.Set("refresh_policy", "ON_READ"); err != nil {
			return fmt.Errorf("Error setting refresh_policy: %s", err)
		}
	}
	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading DataExchangeSubscription: %s", err)
	}

	if err := d.Set("name", flattenBigqueryAnalyticsHubDataExchangeSubscriptionName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataExchangeSubscription: %s", err)
	}
	if err := d.Set("creation_time", flattenBigqueryAnalyticsHubDataExchangeSubscriptionCreationTime(res["creationTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataExchangeSubscription: %s", err)
	}
	if err := d.Set("last_modify_time", flattenBigqueryAnalyticsHubDataExchangeSubscriptionLastModifyTime(res["lastModifyTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataExchangeSubscription: %s", err)
	}
	if err := d.Set("organization_id", flattenBigqueryAnalyticsHubDataExchangeSubscriptionOrganizationId(res["organizationId"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataExchangeSubscription: %s", err)
	}
	if err := d.Set("organization_display_name", flattenBigqueryAnalyticsHubDataExchangeSubscriptionOrganizationDisplayName(res["organizationDisplayName"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataExchangeSubscription: %s", err)
	}
	if err := d.Set("state", flattenBigqueryAnalyticsHubDataExchangeSubscriptionState(res["state"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataExchangeSubscription: %s", err)
	}
	if err := d.Set("resource_type", flattenBigqueryAnalyticsHubDataExchangeSubscriptionResourceType(res["resourceType"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataExchangeSubscription: %s", err)
	}
	if err := d.Set("linked_dataset_map", flattenBigqueryAnalyticsHubDataExchangeSubscriptionLinkedDatasetMap(res["linkedDatasetMap"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataExchangeSubscription: %s", err)
	}
	if err := d.Set("linked_resources", flattenBigqueryAnalyticsHubDataExchangeSubscriptionLinkedResources(res["linkedResources"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataExchangeSubscription: %s", err)
	}
	if err := d.Set("data_exchange", flattenBigqueryAnalyticsHubDataExchangeSubscriptionDataExchange(res["dataExchange"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataExchangeSubscription: %s", err)
	}
	if err := d.Set("log_linked_dataset_query_user_email", flattenBigqueryAnalyticsHubDataExchangeSubscriptionLogLinkedDatasetQueryUserEmail(res["logLinkedDatasetQueryUserEmail"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataExchangeSubscription: %s", err)
	}
	if err := d.Set("subscription_id", flattenBigqueryAnalyticsHubDataExchangeSubscriptionSubscriptionId(res["subscriptionId"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataExchangeSubscription: %s", err)
	}
	if err := d.Set("subscriber_contact", flattenBigqueryAnalyticsHubDataExchangeSubscriptionSubscriberContact(res["subscriberContact"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataExchangeSubscription: %s", err)
	}

	identity, err := d.Identity()
	if err != nil && identity != nil {
		if v, ok := identity.GetOk("location"); ok && v != "" {
			err = identity.Set("location", d.Get("location").(string))
			if err != nil {
				return fmt.Errorf("Error setting location: %s", err)
			}
		}
		if v, ok := identity.GetOk("subscription_id"); ok && v != "" {
			err = identity.Set("subscription_id", d.Get("subscription_id").(string))
			if err != nil {
				return fmt.Errorf("Error setting subscription_id: %s", err)
			}
		}
		if v, ok := identity.GetOk("project"); ok && v != "" {
			err = identity.Set("project", d.Get("project").(string))
			if err != nil {
				return fmt.Errorf("Error setting project: %s", err)
			}
		}
	} else {
		log.Printf("[DEBUG] identity not set: %s", err)
	}
	return nil
}

func resourceBigqueryAnalyticsHubDataExchangeSubscriptionUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	//If a mutable field is added later in the subscription resource, an update API endpoint will be created
	//and this custom_update will have to be changed and will call a Update API as well as done by mutable resources.
	// all other fields are immutable for now, don't do anything else

	_ = config

	// We can get here if 'refresh_policy' was updated in the HCL config.
	// Since 'refresh_policy' has a default, d.Get("refresh_policy") will always return a string.
	// We check if its value has actually changed from the prior state.
	if d.HasChange("refresh_policy") {
		// If 'refresh_policy' was changed by the user, ensure its new value is set in the state.
		// For an Optional+Computed-false field like this, Terraform usually handles this,
		// but this explicit Set operation mirrors the previous boolean field handling.
		if err := d.Set("refresh_policy", d.Get("refresh_policy")); err != nil {
			return fmt.Errorf("Error updating refresh_policy: %s", err)
		}
	}

	return nil
}

func resourceBigqueryAnalyticsHubDataExchangeSubscriptionDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for DataExchangeSubscription: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{BigqueryAnalyticsHubBasePath}}projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting DataExchangeSubscription %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "DataExchangeSubscription")
	}

	log.Printf("[DEBUG] Finished deleting DataExchangeSubscription %q: %#v", d.Id(), res)
	return nil
}

func resourceBigqueryAnalyticsHubDataExchangeSubscriptionImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/subscriptions/(?P<subscription_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<subscription_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<subscription_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/subscriptions/{{subscription_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Explicitly set virtual fields to default values on import
	if err := d.Set("refresh_policy", "ON_READ"); err != nil {
		return nil, fmt.Errorf("Error setting refresh_policy: %s", err)
	}

	return []*schema.ResourceData{d}, nil
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionCreationTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionLastModifyTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionOrganizationId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionOrganizationDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionResourceType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionLinkedDatasetMap(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.(map[string]interface{})
	transformed := make([]interface{}, 0, len(l))
	for k, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"resource_name":              k,
			"listing":                    flattenBigqueryAnalyticsHubDataExchangeSubscriptionLinkedDatasetMapListing(original["listing"], d, config),
			"linked_dataset":             flattenBigqueryAnalyticsHubDataExchangeSubscriptionLinkedDatasetMapLinkedDataset(original["linkedDataset"], d, config),
			"linked_pubsub_subscription": flattenBigqueryAnalyticsHubDataExchangeSubscriptionLinkedDatasetMapLinkedPubsubSubscription(original["linkedPubsubSubscription"], d, config),
		})
	}
	return transformed
}
func flattenBigqueryAnalyticsHubDataExchangeSubscriptionLinkedDatasetMapListing(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionLinkedDatasetMapLinkedDataset(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionLinkedDatasetMapLinkedPubsubSubscription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionLinkedResources(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"listing":        flattenBigqueryAnalyticsHubDataExchangeSubscriptionLinkedResourcesListing(original["listing"], d, config),
			"linked_dataset": flattenBigqueryAnalyticsHubDataExchangeSubscriptionLinkedResourcesLinkedDataset(original["linkedDataset"], d, config),
		})
	}
	return transformed
}
func flattenBigqueryAnalyticsHubDataExchangeSubscriptionLinkedResourcesListing(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionLinkedResourcesLinkedDataset(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionDataExchange(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionLogLinkedDatasetQueryUserEmail(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionSubscriptionId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	parts := strings.Split(d.Get("name").(string), "/")
	return parts[len(parts)-1]
}

func flattenBigqueryAnalyticsHubDataExchangeSubscriptionSubscriberContact(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandBigqueryAnalyticsHubDataExchangeSubscriptionSubscriptionId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubDataExchangeSubscriptionSubscriberContact(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDataset(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLocation, err := expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDatasetLocation(original["location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["location"] = transformedLocation
	}

	transformedDatasetReference, err := expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDatasetDatasetReference(original["dataset_reference"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatasetReference); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["datasetReference"] = transformedDatasetReference
	}

	transformedFriendlyName, err := expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDatasetFriendlyName(original["friendly_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFriendlyName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["friendlyName"] = transformedFriendlyName
	}

	transformedDescription, err := expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDatasetDescription(original["description"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDescription); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["description"] = transformedDescription
	}

	transformedLabels, err := expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDatasetLabels(original["labels"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLabels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["labels"] = transformedLabels
	}

	return transformed, nil
}

func expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDatasetLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDatasetDatasetReference(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDatasetId, err := expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDatasetDatasetReferenceDatasetId(original["dataset_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatasetId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["datasetId"] = transformedDatasetId
	}

	transformedProjectId, err := expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDatasetDatasetReferenceProjectId(original["project_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["projectId"] = transformedProjectId
	}

	return transformed, nil
}

func expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDatasetDatasetReferenceDatasetId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDatasetDatasetReferenceProjectId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDatasetFriendlyName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDatasetDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDatasetLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func resourceBigqueryAnalyticsHubDataExchangeSubscriptionEncoder(d *schema.ResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	config := meta.(*transport_tpg.Config)
	if v, ok := d.GetOk("subscription_id"); ok {
		obj["subscription"] = v.(string)
		// Remove the auto-generated "subscriptionId" if it was added by MM, as it conflicts.
		delete(obj, "subscriptionId")
	}

	// The API expects a 'destination' field in the request body for the subscriber's
	// project and location, e.g., "projects/my-project/locations/us-central1".
	// This is derived from the 'project' and 'location' fields of the resource.
	project := d.Get("project").(string)
	location := d.Get("location").(string)
	obj["destination"] = fmt.Sprintf("projects/%s/locations/%s", project, location)

	if v, ok := d.GetOk("subscriber_contact"); ok {
		obj["subscriberContact"] = v.(string)
	}

	if v, ok := d.GetOk("destination_dataset"); ok && v != nil {
		expandedDataset, err := expandBigqueryAnalyticsHubDataExchangeSubscriptionDestinationDataset(v, d, config)
		if err != nil {
			return nil, fmt.Errorf("error expanding destination_dataset: %w", err)
		}
		// Ensure the expanded dataset is not empty before assigning, to avoid sending empty objects.
		if expandedDataset != nil && !tpgresource.IsEmptyValue(reflect.ValueOf(expandedDataset)) {
			obj["destinationDataset"] = expandedDataset
		} else {
			// If the expanded dataset is empty, remove it from the payload to avoid API errors.
			delete(obj, "destinationDataset")
		}
	} else {
		// If destination_dataset is not provided by the user, ensure it's not in the payload.
		delete(obj, "destinationDataset")
	}

	return obj, nil
}

func resourceBigqueryAnalyticsHubDataExchangeSubscriptionDecoder(d *schema.ResourceData, meta interface{}, res map[string]interface{}) (map[string]interface{}, error) {
	if v, ok := res["name"]; ok && v != nil {
		name := v.(string)
		parts := strings.Split(name, "/")
		if len(parts) > 0 {
			// The last part of the resource name is the subscription ID.
			d.Set("subscription_id", parts[len(parts)-1])
		}
	}

	if v, ok := res["subscriberContact"]; ok && v != nil {
		d.Set("subscriber_contact", v.(string))
	}

	return res, nil
}

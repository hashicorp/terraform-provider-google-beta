// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/cloudquotas/QuotaAdjusterSettings.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package cloudquotas

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"
)

func ResourceCloudQuotasQuotaAdjusterSettings() *schema.Resource {
	return &schema.Resource{
		Create: resourceCloudQuotasQuotaAdjusterSettingsCreate,
		Read:   resourceCloudQuotasQuotaAdjusterSettingsRead,
		Update: resourceCloudQuotasQuotaAdjusterSettingsUpdate,
		Delete: resourceCloudQuotasQuotaAdjusterSettingsDelete,

		Importer: &schema.ResourceImporter{
			State: resourceCloudQuotasQuotaAdjusterSettingsImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"enablement": {
				Type:         schema.TypeString,
				Required:     true,
				ValidateFunc: verify.ValidateEnum([]string{"ENABLED", "DISABLED"}),
				Description:  `Required. The configured value of the enablement at the given resource. Possible values: ["ENABLED", "DISABLED"]`,
			},
			"parent": {
				Type:        schema.TypeString,
				Computed:    true,
				Optional:    true,
				ForceNew:    true,
				Description: `The parent of the quota preference. Allowed parent format is "projects/[project-id / number]".`,
			},
			"effective_container": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The resource container that determines if the quota adjuster is set for this project.
Expect this field to be empty currently.`,
			},
			"effective_enablement": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Based on the effective container's setting above, determines Whether this resource container has the quota adjuster enabled.
Expect this field to be empty currently.`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceCloudQuotasQuotaAdjusterSettingsCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	enablementProp, err := expandCloudQuotasQuotaAdjusterSettingsEnablement(d.Get("enablement"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("enablement"); !tpgresource.IsEmptyValue(reflect.ValueOf(enablementProp)) && (ok || !reflect.DeepEqual(v, enablementProp)) {
		obj["enablement"] = enablementProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudQuotasBasePath}}{{parent}}/locations/global/quotaAdjusterSettings")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new QuotaAdjusterSettings: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating QuotaAdjusterSettings: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/locations/global/quotaAdjusterSettings")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating QuotaAdjusterSettings %q: %#v", d.Id(), res)

	return resourceCloudQuotasQuotaAdjusterSettingsRead(d, meta)
}

func resourceCloudQuotasQuotaAdjusterSettingsRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudQuotasBasePath}}{{parent}}/locations/global/quotaAdjusterSettings")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("CloudQuotasQuotaAdjusterSettings %q", d.Id()))
	}

	if err := d.Set("enablement", flattenCloudQuotasQuotaAdjusterSettingsEnablement(res["enablement"], d, config)); err != nil {
		return fmt.Errorf("Error reading QuotaAdjusterSettings: %s", err)
	}
	if err := d.Set("effective_container", flattenCloudQuotasQuotaAdjusterSettingsEffectiveContainer(res["effectiveContainer"], d, config)); err != nil {
		return fmt.Errorf("Error reading QuotaAdjusterSettings: %s", err)
	}
	if err := d.Set("effective_enablement", flattenCloudQuotasQuotaAdjusterSettingsEffectiveEnablement(res["effectiveEnablement"], d, config)); err != nil {
		return fmt.Errorf("Error reading QuotaAdjusterSettings: %s", err)
	}

	return nil
}

func resourceCloudQuotasQuotaAdjusterSettingsUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	enablementProp, err := expandCloudQuotasQuotaAdjusterSettingsEnablement(d.Get("enablement"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("enablement"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, enablementProp)) {
		obj["enablement"] = enablementProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{CloudQuotasBasePath}}{{parent}}/locations/global/quotaAdjusterSettings")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating QuotaAdjusterSettings %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error updating QuotaAdjusterSettings %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating QuotaAdjusterSettings %q: %#v", d.Id(), res)
	}

	return resourceCloudQuotasQuotaAdjusterSettingsRead(d, meta)
}

func resourceCloudQuotasQuotaAdjusterSettingsDelete(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[WARNING] CloudQuotas QuotaAdjusterSettings resources"+
		" cannot be deleted from Google Cloud. The resource %s will be removed from Terraform"+
		" state, but will still be present on Google Cloud.", d.Id())
	d.SetId("")

	return nil
}

func resourceCloudQuotasQuotaAdjusterSettingsImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^(?P<parent>.+)/locations/global/quotaAdjusterSettings$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/locations/global/quotaAdjusterSettings")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenCloudQuotasQuotaAdjusterSettingsEnablement(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudQuotasQuotaAdjusterSettingsEffectiveContainer(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudQuotasQuotaAdjusterSettingsEffectiveEnablement(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandCloudQuotasQuotaAdjusterSettingsEnablement(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

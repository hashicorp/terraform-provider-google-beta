// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package compute_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/envvar"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccComputeFutureReservation_futureReservationBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"billing_account": envvar.GetTestBillingAccountFromEnv(t),
		"org_id":          envvar.GetTestOrgFromEnv(t),
		"project":         envvar.GetTestProjectFromEnv(),
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckComputeFutureReservationDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeFutureReservation_futureReservationBasicExample(context),
			},
			{
				ResourceName:            "google_compute_future_reservation.gce_future_reservation",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"auto_created_reservations_delete_time", "auto_delete_auto_created_reservations"},
			},
		},
	})
}

func testAccComputeFutureReservation_futureReservationBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_future_reservation" "gce_future_reservation" {
  provider = google-beta
  name     = "tf-test-gce-future-reservation%{random_suffix}"
  project  = "%{project}"
  auto_delete_auto_created_reservations = true
  planning_status = "DRAFT"
  name_prefix = "fr-basic"
  time_window {
    start_time = "2025-11-01T00:00:00Z"
    end_time   = "2025-11-02T00:00:00Z"
  }
  specific_sku_properties {
    total_count = "1"

    instance_properties {
      machine_type = "e2-standard-2"
    }
  }
}
`, context)
}

func TestAccComputeFutureReservation_sharedFutureReservationExample(t *testing.T) {
	acctest.SkipIfVcr(t)
	t.Parallel()

	context := map[string]interface{}{
		"billing_account": envvar.GetTestBillingAccountFromEnv(t),
		"org_id":          envvar.GetTestOrgFromEnv(t),
		"project":         envvar.GetTestProjectFromEnv(),
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckComputeFutureReservationDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeFutureReservation_sharedFutureReservationExample(context),
			},
			{
				ResourceName:            "google_compute_future_reservation.gce_future_reservation",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"auto_created_reservations_delete_time", "auto_delete_auto_created_reservations"},
			},
		},
	})
}

func testAccComputeFutureReservation_sharedFutureReservationExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_project" "owner_project" {
  project_id      = "tf-test%{random_suffix}"
  name            = "tf-test%{random_suffix}"
  org_id          = "%{org_id}"
  billing_account = "%{billing_account}"
  deletion_policy = "DELETE"
}

resource "google_project_service" "compute" {
  project            = google_project.owner_project.project_id
  service            = "compute.googleapis.com"
  disable_on_destroy = false
}

resource "google_project" "guest_project" {
  project_id      = "tf-test-2%{random_suffix}"
  name            = "tf-test-2%{random_suffix}"
  org_id          = "%{org_id}"
  deletion_policy = "DELETE"
}

resource "google_organization_policy" "shared_future_reservation_org_policy" {
  org_id     = "%{org_id}"
  constraint = "constraints/compute.sharedReservationsOwnerProjects"
  list_policy {
    allow {
      values = ["projects/${google_project.owner_project.number}"]
    }
  }
}

resource "google_compute_future_reservation" "gce_future_reservation" {
  project = google_project.owner_project.project_id
  name    = "tf-test-gce-shared-future-reservation%{random_suffix}"
  time_window {
    start_time = "2025-08-01T00:00:00Z"
    end_time   = "2025-08-02T00:00:00Z"
  }

  share_settings {
    share_type = "SPECIFIC_PROJECTS"
    project_map {
      id         = google_project.guest_project.project_id
      project_id = google_project.guest_project.project_id
    }
  }


  depends_on = [
    google_organization_policy.shared_future_reservation_org_policy,
    google_project_service.compute
  ]
}
`, context)
}

func testAccCheckComputeFutureReservationDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_compute_future_reservation" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ComputeBasePath}}projects/{{project}}/zones/{{zone}}/futureReservations/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("ComputeFutureReservation still exists at %s", url)
			}
		}

		return nil
	}
}

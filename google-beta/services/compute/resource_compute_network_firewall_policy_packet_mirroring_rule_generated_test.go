// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package compute_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/envvar"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccComputeNetworkFirewallPolicyPacketMirroringRule_computeNetworkFirewallPolicyPacketMirroringRuleExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"project_name":  envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckComputeNetworkFirewallPolicyPacketMirroringRuleDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeNetworkFirewallPolicyPacketMirroringRule_computeNetworkFirewallPolicyPacketMirroringRuleExample(context),
			},
			{
				ResourceName:            "google_compute_network_firewall_policy_packet_mirroring_rule.primary",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"firewall_policy"},
			},
		},
	})
}

func testAccComputeNetworkFirewallPolicyPacketMirroringRule_computeNetworkFirewallPolicyPacketMirroringRuleExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
  provider = google-beta
}

resource "google_compute_network" "default" {
  provider                = google-beta
  name                    = "tf-test-fw-network%{random_suffix}"
  auto_create_subnetworks = false
}

resource "google_compute_network_firewall_policy" "basic_network_firewall_policy" {
  provider    = google-beta
  name        = "tf-test-fw-policy%{random_suffix}"
  description = "Sample global network firewall policy"
  project     = "%{project_name}"
}

resource "google_compute_network_firewall_policy_packet_mirroring_rule" "primary" {
  provider                = google-beta
  action                  = "mirror"
  description             = "This is a simple packet mirroring rule description"
  direction               = "INGRESS"
  disabled                = false
  firewall_policy         = google_compute_network_firewall_policy.basic_network_firewall_policy.name
  priority                = 1000
  rule_name               = "test-rule"

  match {
    src_ip_ranges = ["10.100.0.1/32"]
    layer4_configs {
      ip_protocol = "all"
    }
  }
  security_profile_group = "//networksecurity.googleapis.com/${google_network_security_security_profile_group.security_profile_group_1.id}"

  target_secure_tags {
    name = "tagValues/${google_tags_tag_value.secure_tag_value_1.name}"
  }
}

resource "google_network_security_mirroring_deployment_group" "default" {
  provider                      = google-beta
  mirroring_deployment_group_id = "tf-test-deployment-group%{random_suffix}"
  location                      = "global"
  network                       = google_compute_network.default.id
}

resource "google_network_security_mirroring_endpoint_group" "default" {
  provider                      = google-beta
  mirroring_endpoint_group_id   = "tf-test-endpoint-group%{random_suffix}"
  location                      = "global"
  mirroring_deployment_group    = google_network_security_mirroring_deployment_group.default.id
}

resource "google_network_security_security_profile" "default" {
  provider    = google-beta
  name        = "tf-test-sec-profile%{random_suffix}"
  parent      = "organizations/%{org_id}"
  description = "my description"
  type        = "CUSTOM_MIRRORING"

  custom_mirroring_profile {
    mirroring_endpoint_group = google_network_security_mirroring_endpoint_group.default.id
  }
}

resource "google_network_security_security_profile_group" "security_profile_group_1" {
  provider                 = google-beta
  name                     = "tf-test-sec-profile-group%{random_suffix}"
  parent                   = "organizations/%{org_id}"
  description              = "my description"
  custom_mirroring_profile = google_network_security_security_profile.default.id
}

resource "google_tags_tag_key" "secure_tag_key_1" {
  provider    = google-beta
  description = "Test tag key description"
  parent      = "organizations/%{org_id}"
  purpose     = "GCE_FIREWALL"
  short_name  = "tf-test-tag-key%{random_suffix}"
  purpose_data = {
    network = "%{project_name}/${google_compute_network.default.name}"
  }
}

resource "google_tags_tag_value" "secure_tag_value_1" {
  provider    = google-beta
  description = "Test tag value description."
  parent      = google_tags_tag_key.secure_tag_key_1.id
  short_name  = "tf-test-tag-value%{random_suffix}"
}
`, context)
}

func testAccCheckComputeNetworkFirewallPolicyPacketMirroringRuleDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_compute_network_firewall_policy_packet_mirroring_rule" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ComputeBasePath}}projects/{{project}}/global/firewallPolicies/{{firewall_policy}}/getPacketMirroringRule?priority={{priority}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("ComputeNetworkFirewallPolicyPacketMirroringRule still exists at %s", url)
			}
		}

		return nil
	}
}

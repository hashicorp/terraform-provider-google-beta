// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/observability/TraceScope.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package observability

import (
	"fmt"
	"log"
	"net/http"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func ResourceObservabilityTraceScope() *schema.Resource {
	return &schema.Resource{
		Create: resourceObservabilityTraceScopeCreate,
		Read:   resourceObservabilityTraceScopeRead,
		Update: resourceObservabilityTraceScopeUpdate,
		Delete: resourceObservabilityTraceScopeDelete,

		Importer: &schema.ResourceImporter{
			State: resourceObservabilityTraceScopeImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		CustomizeDiff: customdiff.All(
			tpgresource.DefaultProviderProject,
		),

		Schema: map[string]*schema.Schema{
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `GCP region the TraceScope is stored in. Only 'global' is supported.`,
			},
			"resource_names": {
				Type:     schema.TypeList,
				Required: true,
				Description: `Names of the projects that are included in this trace scope.

*  'projects/[PROJECT_ID]'

A trace scope can include a maximum of 20 projects.`,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"trace_scope_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `A client-assigned identifier for the trace scope.`,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `Describes this trace scope.

The maximum length of the description is 8000 characters.`,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The creation timestamp of the trace scope.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Identifier. The resource name of the trace scope.

For example:

projects/my-project/locations/global/traceScopes/my-trace-scope`,
			},
			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The last update timestamp of the trace scope.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceObservabilityTraceScopeCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	descriptionProp, err := expandObservabilityTraceScopeDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	resourceNamesProp, err := expandObservabilityTraceScopeResourceNames(d.Get("resource_names"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("resource_names"); !tpgresource.IsEmptyValue(reflect.ValueOf(resourceNamesProp)) && (ok || !reflect.DeepEqual(v, resourceNamesProp)) {
		obj["resourceNames"] = resourceNamesProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ObservabilityBasePath}}projects/{{project}}/locations/{{location}}/traceScopes?traceScopeId={{trace_scope_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new TraceScope: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for TraceScope: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating TraceScope: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/traceScopes/{{trace_scope_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating TraceScope %q: %#v", d.Id(), res)

	return resourceObservabilityTraceScopeRead(d, meta)
}

func resourceObservabilityTraceScopeRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ObservabilityBasePath}}projects/{{project}}/locations/{{location}}/traceScopes/{{trace_scope_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for TraceScope: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ObservabilityTraceScope %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading TraceScope: %s", err)
	}

	if err := d.Set("create_time", flattenObservabilityTraceScopeCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading TraceScope: %s", err)
	}
	if err := d.Set("description", flattenObservabilityTraceScopeDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading TraceScope: %s", err)
	}
	if err := d.Set("name", flattenObservabilityTraceScopeName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading TraceScope: %s", err)
	}
	if err := d.Set("resource_names", flattenObservabilityTraceScopeResourceNames(res["resourceNames"], d, config)); err != nil {
		return fmt.Errorf("Error reading TraceScope: %s", err)
	}
	if err := d.Set("update_time", flattenObservabilityTraceScopeUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading TraceScope: %s", err)
	}

	return nil
}

func resourceObservabilityTraceScopeUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for TraceScope: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	descriptionProp, err := expandObservabilityTraceScopeDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	resourceNamesProp, err := expandObservabilityTraceScopeResourceNames(d.Get("resource_names"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("resource_names"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, resourceNamesProp)) {
		obj["resourceNames"] = resourceNamesProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{ObservabilityBasePath}}projects/{{project}}/locations/{{location}}/traceScopes/{{trace_scope_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating TraceScope %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("description") {
		updateMask = append(updateMask, "description")
	}

	if d.HasChange("resource_names") {
		updateMask = append(updateMask, "resourceNames")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating TraceScope %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating TraceScope %q: %#v", d.Id(), res)
		}

	}

	return resourceObservabilityTraceScopeRead(d, meta)
}

func resourceObservabilityTraceScopeDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for TraceScope: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{ObservabilityBasePath}}projects/{{project}}/locations/{{location}}/traceScopes/{{trace_scope_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	log.Printf("[DEBUG] Deleting TraceScope %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "TraceScope")
	}

	log.Printf("[DEBUG] Finished deleting TraceScope %q: %#v", d.Id(), res)
	return nil
}

func resourceObservabilityTraceScopeImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/traceScopes/(?P<trace_scope_id>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<trace_scope_id>[^/]+)$",
		"^(?P<location>[^/]+)/(?P<trace_scope_id>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{location}}/traceScopes/{{trace_scope_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenObservabilityTraceScopeCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenObservabilityTraceScopeDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenObservabilityTraceScopeName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenObservabilityTraceScopeResourceNames(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenObservabilityTraceScopeUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandObservabilityTraceScopeDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandObservabilityTraceScopeResourceNames(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

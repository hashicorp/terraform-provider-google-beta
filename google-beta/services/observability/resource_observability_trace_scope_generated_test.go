// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package observability_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/envvar"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccObservabilityTraceScope_observabilityTraceScopeBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckObservabilityTraceScopeDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccObservabilityTraceScope_observabilityTraceScopeBasicExample(context),
			},
			{
				ResourceName:            "google_observability_trace_scope.observability_trace_scope",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "trace_scope_id"},
			},
		},
	})
}

func testAccObservabilityTraceScope_observabilityTraceScopeBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_observability_trace_scope" "observability_trace_scope" {
    depends_on       = [google_project.project-2]
    provider         = google-beta
    trace_scope_id   = "tf-test-test-scope%{random_suffix}"
    location         = "global"
    resource_names   = [
        "projects/${data.google_project.project.project_id}",
        "projects/${google_project.project-2.project_id}",
    ]
    description      = "A trace scope configured with Terraform"
}

data "google_project" "project" {
    provider         = google-beta
}

resource "google_project" "project-2" {
    provider         = google-beta
    project_id       = "tf-test%{random_suffix}"
    name             = "tf-test%{random_suffix}"
    org_id           = "%{org_id}"
    deletion_policy  = "DELETE"
}
`, context)
}

func testAccCheckObservabilityTraceScopeDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_observability_trace_scope" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ObservabilityBasePath}}projects/{{project}}/locations/{{location}}/traceScopes/{{trace_scope_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("ObservabilityTraceScope still exists at %s", url)
			}
		}

		return nil
	}
}

// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package apigee_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/envvar"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccApigeeDnsZone_apigeeDnsZoneBasicTestExample(t *testing.T) {
	acctest.SkipIfVcr(t)
	t.Parallel()

	context := map[string]interface{}{
		"billing_account": envvar.GetTestBillingAccountFromEnv(t),
		"org_id":          envvar.GetTestOrgFromEnv(t),
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"time": {},
		},
		CheckDestroy: testAccCheckApigeeDnsZoneDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccApigeeDnsZone_apigeeDnsZoneBasicTestExample(context),
			},
			{
				ResourceName:            "google_apigee_dns_zone.apigee_dns_zone",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"dns_zone_id", "org_id"},
			},
		},
	})
}

func testAccApigeeDnsZone_apigeeDnsZoneBasicTestExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
 resource "google_project" "project" {
   provider = google-beta

   project_id      = "tf-test%{random_suffix}"
   name            = "tf-test%{random_suffix}"
   org_id          = "%{org_id}"
   billing_account = "%{billing_account}"
   deletion_policy = "DELETE"
 }

 resource "time_sleep" "wait_120_seconds" {
   create_duration = "120s"
   depends_on = [google_project.project]
 }

resource "google_project_service" "apigee" {
  provider = google-beta

  project = google_project.project.project_id
  service = "apigee.googleapis.com"
}

resource "google_project_service" "compute" {
  provider = google-beta

  project = google_project.project.project_id
  service = "compute.googleapis.com"
  depends_on = [
    google_project_service.container,
    time_sleep.wait_120_seconds,
  ]
}

resource "google_project_service" "container" {
  provider = google-beta

  project = google_project.project.project_id
  service = "compute.googleapis.com"
}

resource "google_project_service" "dns" {
  provider = google-beta

  project = google_project.project.project_id
  service = "dns.googleapis.com"
}

resource "time_sleep" "wait_120_seconds_2" {
  create_duration = "120s"
  depends_on = [google_project_service.compute]
}

resource "google_compute_network" "apigee_network" {
  provider = google-beta

  name       = "apigee-network"
  project    = google_project.project.project_id
  depends_on = [time_sleep.wait_120_seconds_2]
}

resource "google_project_service_identity" "apigee_sa" {
  provider = google-beta

  project = google_project.project.project_id
  service = google_project_service.apigee.service
  depends_on = [google_project_service.apigee]
}

resource "time_sleep" "wait_60_seconds" {
  create_duration = "60s"
  depends_on = [google_project_service_identity.apigee_sa]
}

resource "google_project_iam_member" "project" {
  provider = google-beta

  project = google_project.project.project_id
  role    = "roles/dns.peer"
  member  = google_project_service_identity.apigee_sa.member
  depends_on = [
      google_project_service_identity.apigee_sa,
      time_sleep.wait_60_seconds,
  ]
}

resource "google_apigee_organization" "apigee_org" {
  provider = google-beta

  analytics_region   = "us-central1"
  project_id         = google_project.project.project_id
  disable_vpc_peering = true
  depends_on         = [
    google_project_service.compute,
    google_project_service.container,
    google_project_service.dns,
    google_project_service.apigee,
    google_project_iam_member.project,
  ]
}

resource "google_apigee_dns_zone" "apigee_dns_zone" {
  provider = google-beta

  dns_zone_id     = "tf-test%{random_suffix}"
  org_id   = google_apigee_organization.apigee_org.id
  domain = "foo.com"
  description = "test"
  peering_config {
    target_project_id = google_project.project.project_id
    target_network_id = "apigee-network"
  }
  depends_on  = [
    google_apigee_organization.apigee_org
  ]
}
`, context)
}

func testAccCheckApigeeDnsZoneDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_apigee_dns_zone" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ApigeeBasePath}}{{org_id}}/dnsZones/{{dns_zone_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("ApigeeDnsZone still exists at %s", url)
			}
		}

		return nil
	}
}

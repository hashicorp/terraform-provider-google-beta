// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dialogflow_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/envvar"
)

func TestAccDialogflowEncryptionSpec_dialogflowEncryptionSpecBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"billing_acct":  envvar.GetTestBillingAccountFromEnv(t),
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"time": {},
		},
		Steps: []resource.TestStep{
			{
				Config: testAccDialogflowEncryptionSpec_dialogflowEncryptionSpecBasicExample(context),
			},
		},
	})
}

func testAccDialogflowEncryptionSpec_dialogflowEncryptionSpecBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_project" "project" {
  provider        = google-beta
  project_id      = "tf-test-my-proj%{random_suffix}"
  name            = "tf-test-my-proj%{random_suffix}"
  org_id          = "%{org_id}"
  billing_account = "%{billing_acct}"
  deletion_policy = "DELETE"
}

resource "google_project_service" "cloudkms" {
  provider = google-beta
  project  = google_project.project.project_id
  service  = "cloudkms.googleapis.com"
}

resource "google_project_service" "dialogflow" {
  provider = google-beta
  project  = google_project.project.project_id
  service  = "dialogflow.googleapis.com"
}

resource "time_sleep" "wait_enable_service_api" {
  depends_on = [
    google_project_service.cloudkms,
    google_project_service.dialogflow
  ]
  create_duration = "30s"
}

resource "google_project_service_identity" "gcp_sa" {
  provider   = google-beta
  service    = "dialogflow.googleapis.com"
  project    = google_project.project.project_id
  depends_on = [time_sleep.wait_enable_service_api]
}

resource "time_sleep" "wait_create_sa" {
  depends_on      = [google_project_service_identity.gcp_sa]
  create_duration = "30s"
}

resource "google_kms_key_ring" "keyring" {
  provider   = google-beta
  name       = "tf-test-my-keyring%{random_suffix}"
  location   = "us-central1"
  project    = google_project.project.project_id
  depends_on = [time_sleep.wait_enable_service_api]
}

resource "google_kms_crypto_key" "key" {
  provider = google-beta
  name     = "tf-test-my-key%{random_suffix}"
  key_ring = google_kms_key_ring.keyring.id
  purpose  = "ENCRYPT_DECRYPT"
}

resource "google_kms_crypto_key_iam_member" "crypto_key" {
  provider      = google-beta
  crypto_key_id = google_kms_crypto_key.key.id
  member        = "${replace(google_project_service_identity.gcp_sa.member, "@gcp-sa-dialogflow.iam", "@gcp-sa-ccai-cmek.iam")}"
  role          = "roles/cloudkms.cryptoKeyEncrypterDecrypter"
  depends_on    = [time_sleep.wait_create_sa]
}

resource "google_dialogflow_encryption_spec" "my-encryption-spec" {
  provider = google-beta
  project  = google_project.project.project_id
  location = "us-central1"
  encryption_spec {
    kms_key = google_kms_crypto_key.key.id
  }
  depends_on = [google_kms_crypto_key_iam_member.crypto_key]
}
`, context)
}

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

func TestAccActiveDirectoryPeering_activeDirectoryPeeringBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":          getTestOrgFromEnv(t),
		"billing_account": getTestBillingAccountFromEnv(t),
		"random_suffix":   randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProvidersOiCS,
		CheckDestroy: testAccCheckActiveDirectoryPeeringDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccActiveDirectoryPeering_activeDirectoryPeeringBasicExample(context),
			},
		},
	})
}

func testAccActiveDirectoryPeering_activeDirectoryPeeringBasicExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_active_directory_peering" "ad-domain-peering" {
    provider           = google-beta
    domain_resource    = google_active_directory_domain.ad-domain.name
    peering_id         = "ad-domain-peering"
    authorized_network = google_compute_network.peered-network.id
    labels             = {
        foo = "bar"
    }
}

resource "google_active_directory_domain" "ad-domain" {
    provider            = google-beta
    domain_name         = "ad.test.d-%{random_suffix}.com"
    locations           = ["us-central1"]
    reserved_ip_range   = "192.168.255.0/24"
    authorized_networks = [google_compute_network.source-network.id]
}

resource "google_compute_network" "peered-network" {
    provider = google-beta
    project  = google_project_service.compute.project
    name     = "ad-peered-network"
}

resource "google_compute_network" "source-network" {
    provider = google-beta
    name     = "ad-network"
}

resource "google_project_service" "compute" {
    provider = google-beta
    project  = google_project.peered-project.project_id
    service  = "compute.googleapis.com"
}

resource "google_project" "peered-project" {
    provider        = google-beta
    name            = "peered-project-%{random_suffix}"
    project_id      = "peered-project-%{random_suffix}"
    org_id          = "%{org_id}"
    billing_account = "%{billing_account}"
}
`, context)
}

func testAccCheckActiveDirectoryPeeringDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_active_directory_peering" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := googleProviderConfig(t)

			url, err := replaceVarsForTest(config, rs, "{{ActiveDirectoryBasePath}}{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = sendRequest(config, "GET", billingProject, url, config.userAgent, nil)
			if err == nil {
				return fmt.Errorf("ActiveDirectoryPeering still exists at %s", url)
			}
		}

		return nil
	}
}

---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
layout: "google"
page_title: "Google: google_access_context_manager_service_perimeter"
sidebar_current: "docs-google-access-context-manager-service-perimeter"
description: |-
  ServicePerimeter describes a set of GCP resources which can freely import
  and export data amongst themselves, but not export outside of the
  ServicePerimeter.
---

# google\_access\_context\_manager\_service\_perimeter

ServicePerimeter describes a set of GCP resources which can freely import
and export data amongst themselves, but not export outside of the
ServicePerimeter. If a request with a source within this ServicePerimeter
has a target outside of the ServicePerimeter, the request will be blocked.
Otherwise the request is allowed. There are two types of Service Perimeter
- Regular and Bridge. Regular Service Perimeters cannot overlap, a single
GCP project can only belong to a single regular Service Perimeter. Service
Perimeter Bridges can contain only GCP projects as members, a single GCP
project may belong to multiple Service Perimeter Bridges.

~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/provider_versions.html) for more details on beta resources.

To get more information about ServicePerimeter, see:

* [API documentation](https://cloud.google.com/access-context-manager/docs/reference/rest/v1beta/accessPolicies.servicePerimeters)
* How-to Guides
    * [Access Policy Quickstart](https://cloud.google.com/access-context-manager/docs/quickstart)

## Example Usage - Access Context Manager Service Perimeter Basic


```hcl
resource "google_access_context_manager_service_perimeter" "service-perimeter" {
  parent      = "accessPolicies/${google_access_context_manager_access_policy.test-access.name}"
  name        = "accessPolicies/${google_access_context_manager_access_policy.test-access.name}/servicePerimeters/restrict_all"
  title       = "restrict_all"
  status {
    restricted_services = ["*"]
  }
}

resource "google_access_context_manager_access_level" "access-level" {
  parent      = "accessPolicies/${google_access_context_manager_access_policy.test-access.name}"
  name        = "accessPolicies/${google_access_context_manager_access_policy.test-access.name}/accessLevels/ios_no_lock"
  title       = "ios_no_lock"
  basic {
    conditions {
      device_policy {
        require_screen_lock = false
        os_constraints {
          os_type = "IOS"
        }
      }
    }
  }
}

resource "google_access_context_manager_access_policy" "access-policy" {
  parent = "organizations/123456789"
  title  = "my policy"
}
```

## Argument Reference

The following arguments are supported:


* `title` -
  (Required)
  Human readable title. Must be unique within the Policy.

* `parent` -
  (Required)
  The AccessPolicy this ServicePerimeter lives in.
  Format: accessPolicies/{policy_id}

* `name` -
  (Required)
  Resource name for the ServicePerimeter. The short_name component must
  begin with a letter and only include alphanumeric and '_'.
  Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}


- - -


* `description` -
  (Optional)
  Description of the ServicePerimeter and its use. Does not affect
  behavior.

* `perimeter_type` -
  (Optional)
  Specifies the type of the Perimeter. There are two types: regular and
  bridge. Regular Service Perimeter contains resources, access levels,
  and restricted/unrestricted services. Every resource can be in at most
  ONE regular Service Perimeter.
  In addition to being in a regular service perimeter, a resource can also
  be in zero or more perimeter bridges. A perimeter bridge only contains
  resources. Cross project operations are permitted if all effected
  resources share some perimeter (whether bridge or regular). Perimeter
  Bridge does not contain access levels or services: those are governed
  entirely by the regular perimeter that resource is in.
  Perimeter Bridges are typically useful when building more complex
  toplogies with many independent perimeters that need to share some data
  with a common perimeter, but should not be able to share data among
  themselves.

* `status` -
  (Optional)
  ServicePerimeter configuration. Specifies sets of resources,
  restricted/unrestricted services and access levels that determine
  perimeter content and boundaries.  Structure is documented below.


The `status` block supports:

* `resources` -
  (Optional)
  A list of GCP resources that are inside of the service perimeter.
  Currently only projects are allowed.
  Format: projects/{project_number}

* `access_levels` -
  (Optional)
  A list of AccessLevel resource names that allow resources within
  the ServicePerimeter to be accessed from the internet.
  AccessLevels listed must be in the same policy as this
  ServicePerimeter. Referencing a nonexistent AccessLevel is a
  syntax error. If no AccessLevel names are listed, resources within
  the perimeter can only be accessed via GCP calls with request
  origins within the perimeter. For Service Perimeter Bridge, must
  be empty.
  Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}

* `unrestricted_services` -
  (Optional)
  GCP services that are not subject to the Service Perimeter
  restrictions. May contain a list of services or a single wildcard
  "*". For example, if logging.googleapis.com is unrestricted, users
  can access logs inside the perimeter as if the perimeter doesn't
  exist, and it also means VMs inside the perimeter can access logs
  outside the perimeter.
  The wildcard means that unless explicitly specified by
  "restrictedServices" list, any service is treated as unrestricted.
  One of the fields "restrictedServices", "unrestrictedServices"
  must contain a wildcard "*", otherwise the Service Perimeter
  specification is invalid. It also means that both field being
  empty is invalid as well. "unrestrictedServices" can be empty if
  and only if "restrictedServices" list contains a "*" wildcard.

* `restricted_services` -
  (Optional)
  GCP services that are subject to the Service Perimeter
  restrictions. May contain a list of services or a single wildcard
  "*". For example, if storage.googleapis.com is specified, access
  to the storage buckets inside the perimeter must meet the
  perimeter's access restrictions.
  Wildcard means that unless explicitly specified by
  "unrestrictedServices" list, any service is treated as restricted.
  One of the fields "restrictedServices", "unrestrictedServices"
  must contain a wildcard "*", otherwise the Service Perimeter
  specification is invalid. It also means that both field being
  empty is invalid as well. "restrictedServices" can be empty if and
  only if "unrestrictedServices" list contains a "*" wildcard.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:


* `create_time` -
  Time the AccessPolicy was created in UTC.

* `update_time` -
  Time the AccessPolicy was updated in UTC.


## Timeouts

This resource provides the following
[Timeouts](/docs/configuration/resources.html#timeouts) configuration options:

- `create` - Default is 4 minutes.
- `update` - Default is 4 minutes.
- `delete` - Default is 4 minutes.

## Import

ServicePerimeter can be imported using any of these accepted formats:

```
$ terraform import google_access_context_manager_service_perimeter.default {{name}}
```
